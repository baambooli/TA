

///////////////////////////////////////////////////
Yii 1.1.13 notes:
///////////////////////////////////////////////////

1- the URL is always like this:

http://yoursite.com/Module_name_case_insensitive/controller_name_case_insensitive/action_name_case_insensitive/
first_parameter_name_case_insensitive/first_parameter_value_case_insensitive/
second_parameter_name_case_insensitive/second_parameter_value_case_insensitive/
third_parameter_name_case_insensitive/third_parameter_value_case_insensitive/

example : http://kamran.dev.pushplay.com/mrcms/K2/Test2/userId/146/hashCode/21defc662165ffca6d4cf1c28052c3c30ef326c42de600b30ececc7347cc5f1f
or
		  http://kamran.dev.pushplay.com/mrcms/k2/test2/userId/146/hashCode/21defc662165ffca6d4cf1c28052c3c30ef326c42de600b30ececc7347cc5f1f


2- writing a search method:

<?php
    class EmailValidation
    {
        public function validate($userId,$hashCode)
        {
            //DebugBreak();
            
            //fetch user's information from db where userId=$userId 
            $user = User::model()->find('userid = ' . $userId); 
            
            if(   $user->validationKey == $hashCode
               && $user->validationExpiry > Date('Y-m-d h:i:s')){
                return 1;  
            }
            else{
                return 0;
            }
        }    
    }
    
	
3- to show a flash message
	
	
	--in the controller file (Controllers\SelfConfirmController.php):
	
	//send success message
	Yii::app()->user->setFlash('success','Your have been successfully logged in by facebook!');
	$this->render('SelfConfirmView');
	
	or 
	
	//send error message
	Yii::app()->user->setFlash('error','Your have been successfully logged in by facebook!');	
	or
	Yii::app()->user->setFlash('notification','Your have been successfully logged in by facebook!');
	
	$this->render('SelfConfirmView');
	

	--in the view file ( Views\SelfConfirm\SelfConfirmView.php):
	
	<?php
		foreach(Yii::app()->user->getFlashes() as $key => $message) {
			echo '<div class="flash-' . $key . '">' . $message . "</div>\n";
		}
	?>
		
4- reading from a field in a form

	$model->username=$_POST['Model_class_name']['username'];
	$model->password=$_POST['Model_class_name']['password'];
	$model->rememberMe=$_POST['Model_class_name']['rememberMe'];
	
	or in one step:
	
	$model->attributes = $_POST['Model_class_name'];
	
	
5- when using AR to search use Criteria, it decreases SQL injection risk.

6- to show beautiful dialog boxes and other things using Yii, we should use Yiibooster

	search for yiibooster that is twitter bootstrap port for yii
	
	in MRCMS code we can see sample usage of it in :
	
	https://github.com/netmedialtd/app_movie_mrcms/blob/development/views/user/update.php#L87
		
	that is shown here:
	
	<script type="text/javascript">
	$(document).ready(function(){
		$('.btn-send-reset').on('click', function()
		{
		   $('#passwordReset').modal('hide');
		   //TODO: logic for server side reset
		   /* admin.AJAX.REST('post', 'controller/action', {userid : 111} , function(success)
		   {
			   
		   }); */
		});
		$('.btn-cancel').on('click',function()
		{
			window.location = '<?php echo $this->createUrl('/mrcms/user/search') ?>';
		})
	});
	</script>


7- to partially render a page use $this->renderPartial() instead of $this->render()

	http://www.yiiframework.com/wiki/249/understanding-the-view-rendering-flow/
	
8- to see the errors in Yii:

	if ($user->save()){
		// do your things
	}
	else
	{
		$errors = $user->getErrors();
		foreach ($errors as $key => $message) 
		{
			foreach ($message as $subKey => $subMessage) 
			{
				$errMessage .= $subMessage.'<br/>';
			}
		}
		DebugBreak(); // in phpED
		IUser::setNotificationFromModel($errMessage, 'error');
	}
	
9- Typically, after some kind of action, such as editing a form, a redirect will happen and we need to display a 
   message on the page we want to go to. However, how to pass it from the current page to the 
   redirect target and clean afterwards? Flash messages will help us.
	
	a.  Let's create a protected/controllers/WebsiteController.php controller 
	as follows:
	class WebsiteController extends CController
	{
	   function actionOk()
	   {
		  Yii::app()->user->setFlash('success', 'Everything went  
			 fine!');
		  $this->redirect('index');
	   }
	   function actionBad()
	   {
		  Yii::app()->user->setFlash('error', 'Everything went  
			 wrong!');
		  $this->redirect('index');
	   }
	   function actionIndex()
	   {
		  $this->render('index');
	   }
	}
	
	b.  Additionally, create the protected/views/website/index.php view as follows:
    
	<?php if(Yii::app()->user->hasFlash('success')):?>
	<div class="flash-notice">
	   <?php echo Yii::app()->user->getFlash('success')?>
	</div>
	<?php endif?>
	<?php if(Yii::app()->user->hasFlash('error')):?>
	<div class="flash-error">
	   <?php echo Yii::app()->user->getFlash('error')?>
	</div>
	<?php endif?>
	
	c.  Now, if we go to http://example.com/website/ok, we'll be redirected to 
	http://example.com/website/index and a success message will be displayed. 
	Moreover, if we go to http://example.com/website/bad, we will be redirected 
	to the same page, but with an error message. Refreshing the index page will hide  
	the message.
	
10- Do not use __conctruct() in Yii controller classes, use init() function instead!!

11- To show the error messages of a model AR or a model Form class

    $errors = $modelForm->getErrors();

    foreach ($errors as $key => $message) 
    {
        foreach ($message as $subKey => $subMessage) 
        {
            $errMessage .= $subMessage.'<br/>';
        }
    }
    
    Yii::app()->user->setFlash('error ', $errMessage);
    
    // log error
    Yii::log('There are errors in the signup process...', 'error', 'application.controllers.FrontController');

12- a sample phpUnit test class for Rebilly project:
    
    a- edit the protected/config/testing/config_test.php file and change the dbname on it
    
    'db' => array(
        'connectionString' => 'mysql:host='.$_sa['DB1'].';dbname=Rebilly',
        
    b- create a file /protected/tests/unit/UserTest.php
    
    c- write this code on it

        <?php
  
        class UserTest extends CDbTestCase
        {
            public function testSave()
            {
                $user                   = new User();
                $user->merchantId       = 5;
                $user->firstName        = 'ali33';
                $user->lastName         = 'last33';
                $user->email            = 'ali78@yahoo.com';
                $user->password         = '1123';
                $user->status           = 'pendingConfirmation';
                $user->timestampCreated = Date('Y-m-d h:i:s');
                $result                 = $user->save();
                $this->assertTrue($result);  
            }    
        }
        note: you should put valid merchantId and unique email, otherwise save() will fail.
        
    d- in UBUNTU command line run :
        cd  /mnt/host/app_rebilly/protected/tests/
        phpunit unit/UserTest.php
            

13- IMPORTANT NOTE: phpunit 3.7.7 or 3.7.8 has problem in running unit tests. install version 3.7.1 using:

    pear install -f phpunit/PHPUnit-3.7.1
    
14- reading request URL
        $url = $_SERVER['REQUEST_URI'];
        
15- when we have two configuratin files, one for local and one for staging. always keep them syncronized.....

16- the configuration in nginx shows which config file should be used. so the only difference between development machine
    and production machine should be this line in /etc/nginx/sites-enabled/my_web_site_config  file
     
    development machine:
    fastcgi_param APPLICATION_ENV rebilly_local;
    
    staging machine:
    fastcgi_param APPLICATION_ENV rebilly_staging;

17- phone number validation:

    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            ......
            array('customerServiceNumber', 'checkPhoneNumber'),
            ......
        );
    }
    
    /**
    * Checks the phone number filed should be in correct format (xxx-xxx-xxxx) or (1-xxx-xxx-xxxx)
    *
    * 
    * @param string $attribute: the attribute's name that calls this function in the rules() function
    *       
    * @return true: if phone number is correct, otherwise false
    */
    public function checkPhoneNumber($attribute)
    {
        $phoneNumber = $this->customerServiceNumber;
        if (preg_match("/^([1]-)?[0-9]{3}-[0-9]{3}-[0-9]{4}$/i", $phoneNumber))
        {
            return true;
        }
        else
        {
            $this->addError($attribute,'Phone number should be in correct formats (xxx-xxx-xxxx) or (1-xxx-xxx-xxxx)');
            return false;
        }
    }

18- difference between $this->render() and $this->redirect() in Yii
    if our favorite view is on the same controller use $this->render() or $this->renderPartial(), if the view is
	on the other controller we should use $this->redirect()
    
19- url validation needs that url always contains http:// or https://. To avoid this extra typing, we should
    define our rule in rules() function as:
    
    array('site_url , webHookUrl', 'url', 'defaultScheme' => 'http'),
    
    now the user should just type www.google.com instead of http://www.google.com.
    
20- when we have problems in saving Unicode chars in mysql db we should add this line as the header of our main.php layout file:
    
    <?php
        header('Content-Type: text/html; charset=utf-8');
    ?>    
    
21- to convert one column of bootstrap.widgets.TbGridView to a "link" we should use a code like bellow

	<?php 
	///////////////////////////////////////////////////////////////////////////////////////////////
	// very important line
	// if we use $modelSearchHotelView in CLinkColumn, it does not work
	// so we should define this line
	///////////////////////////////////////////////////////////////////////////////////////////////
	$data = $modelSearchHotelView;

	$this->widget('bootstrap.widgets.TbGridView', array(
		'type'=>'striped bordered condensed',
		'id' => 'room-client-grid',
		'dataProvider' => $modelSearchHotelView->search(),
		'filter' => $modelSearchHotelView,
		'columns' => array(
			'HotelName',
			'RoomNumber',
			//'ClientName',
			////////////////////////////////////////////////////////////////////////////////////// 
			// make it a linkable column
			array(
					'class'=>'CLinkColumn',
					// create a sortable header for column
					'header'=>"<a href='index.php?r=roomClient/admin&SearchHotelView_sort=ClientName'>Client Name</a>",
					// label that user will see
					'labelExpression'=>'$data->ClientName',
					// url of the link
					'urlExpression'=>'Yii::app()->createUrl("/client/view/id/".$data->ClientId)',
					// tool tip
					'linkHtmlOptions'=>array('title'=>'See the details of this client')
				),
			///////////////////////////////////////////////////////////////////////////////////////
				
			'ClientFamily',
			'ClientTel',
			'ClientUsername',
			'StartDate',
			'EndDate',
			'Status',
			array(
				'class' => 'bootstrap.widgets.TbButtonColumn',
			),
		),
	));
	?>
	
	NOTE: the only problem is we will lose the search inputbox at the top of the column ;-(
	
    
22- check URL validation so it could not be contain french characters:

    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            ..................
            array('url , webHookUrl', 'url', 'defaultScheme' => 'http'),
            array('url , webHookUrl', 'checkURL'),
            ..................
        );
    }
    
    /**
    * Checks the URL is valid or not
    *
    * 
    * @param string $attribute: The caller attribute's name in the rules() function
    *       
    * @return true: If URL is in correct format, otherwise false
    * 
    * @author :  Kamran
    */
    public function checkURL($attribute)
    {
        $url = $this->url;
        
        if (preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $url))
        {
            return true;
        }
        else
        {
            $this->addError($attribute,'Not a valid URL.');
            return false;
        }            
    }
 
23- IMPORTANT NOTE: for creating complex queries use this software to create views on DB. It is IMPORTANt to
    define all of relations between tables in you MySQL Db BEFORE using this software. Then creating very very 
    complex queries will be really fun.
    
    http://www.devart.com/dbforge/mysql/querybuilder/
    
    and then using Gii, we can create model classes for the VIEWS will have created using these queries and dbFroge. 
    To use this model class (that is created from a view not a table in DB) we should 
    add this function to create a primary key for model class
    
    public function primaryKey()
    {
        return 'my_primary_key_field_name';
    }
    
    then we can use Gii to create controller and views for our new model class easily. (without defining primary key,
    Gii can create model class but not Controller and views)
    
24- to get the id of logged in user
    
    $currentUserID = Yii::app()->user->id;
    
25- find the base URL of out website when we are inside a controller(any controller)
    
    $baseURL = $this->createUrl('');
    
    and if we like to add subpath to it
    
    $myPageURL = $this->createUrl('/front/login');


26- if we are going to restrict the search(admin) page to show just the rows that are NOT 
    soft delete AND are belong to current user we can add these lines to the search() function in the model class
    
    // just show the records that have isDeleted = 0 on the admin page
    $criteria->compare('isDeleted', 0);
    // just show the records that is created by the logged in user on the admin page
    $criteria->compare('merchantID', User::model()->findByPk(Yii::app()->user->id)->merchantId);
    
    In addition in actionUpdate and actionDelete we should write something like:
    
    if (User::model()->findByPk(Yii::app()->user->id)->merchantId <> $model->merchantID)
    {
        Yii::app()->user->setFlash('error', 'You cannot delete a site that does not belong to you.');
        $this->render('error');
    }
    else
    {
        // soft delete the site
        $model = $this->loadModel($id);
        if ($model)
        {
            $model->isDeleted = 1;
            if ($model->save())
            {
                Yii::app()->user->setFlash('success', 'Deleted Successfully');
            }
        }
    }
        
    NOTE: better method is implementing a RBAC to the project
    
        
27- to print numbers in correct currency format:
    
        $total  = number_format(12345.6,2);  //output is : 12,345.60
    
28- Two examples of how to use DAO in Yii (the query is created by dbForge and then parametrized by me):

		a)
			public static function myDelete($id)
			{
				$sql = " Delete from flight_clients where Id = $id";
				$connection = Yii::app()->db;
				$command = $connection->createCommand($sql);
				$command->execute();
			}
		
		b)

			public static function getAccountBalance($userId, $year, $month)
			{
				// prevent SQL injection
				if (!is_numeric($year))
				{
					return;
				}
				
				if (!is_numeric($month))
				{
					return;
				}
				$sql = "SELECT count(*) as count1
						FROM
							User
						INNER JOIN Merchant
							ON User.merchantId = Merchant.id AND Merchant.ownerUserId = User.id
						INNER JOIN Subscription
							ON Subscription.merchantId = Merchant.id
						INNER JOIN Transaction
						INNER JOIN CustomerSubscription
							ON Transaction.customerSubscriptionId = CustomerSubscription.id 
							AND CustomerSubscription.subscriptionId = Subscription.id
						WHERE
							Transaction.type IN ('purchase', 'refund', 'cerdit')
							AND Transaction.result IN ('approved', 'declined')
							AND Transaction.createdOn BETWEEN str_to_date('$year-$month-01', '%Y-%m-%d') 
							AND str_to_date('$year-$month-31', '%Y-%m-%d')
							AND User.id = $userId 
						";

				$connection = Yii::app()->db;
				$command = $connection->createCommand($sql);
				$dataReader = $command->query();
				$numberOfTransactions = $dataReader->read();
				return $numberOfTransactions['count1'];
			}

29- the above function can be written with query builder instead of DAO as bellow
        
        public static function getAccountBalance($userId, $year, $month)
        {
            $numberOfTransactions = Yii::app()->db->createCommand()
                ->select('count(*) as count1')
                ->from('User')
                ->join('Merchant', 'User.merchantId = Merchant.id AND Merchant.ownerUserId = User.id')
                ->join('Subscription', 'Subscription.merchantId = Merchant.id')
                ->join('Transaction', '')
                ->join('CustomerSubscription', 'Transaction.customerSubscriptionId = CustomerSubscription.id 
                        AND CustomerSubscription.subscriptionId = Subscription.id')
                ->where("Transaction.type IN ('purchase', 'refund', 'credit')
                        AND Transaction.result IN ('approved', 'declined')
                        AND Transaction.createdOn BETWEEN str_to_date(:startDate, '%Y-%m-%d') 
                        AND str_to_date(:endDate, '%Y-%m-%d')
                        AND User.id = ':userId'", array(':startDate' => $year.'-'.$month.'-01', ':endDate' => $year.'-'.$month.'-31', ':userId' => $userId) )
                ->queryRow();
                        
            return $numberOfTransactions['count1'];
        }
        
30- to create a global (application level) variable in Yii and using it

	// first write this line in config/main.php
	'params' => array(
        ......
        
        'my_variable' => '123456', 
    ),

	then in your source code use it like
	
	// get application level variable:
	echo Yii::app()->params['my_variable'];
	
	// set application level variable:
	 Yii::app()->params['my_variable']= 'kamran';
	
	it is possible to store even objects but it's not a good practice... it's better to store only some ID for example (PK)...
	and then recreate the object... 
	
31- when we are creating a Db before defining constraints on it, we should insert some default and CORRECT data to avoid database constraint error after
	applying constratins. for example we can create a single row with all 0 values in each table and the default value of all of integers and Foriegn keys 
	will be st to 0. so in case on creatinga  new record, we will not have any error
	
	
32- IMPORTANT NOTE: in creating ONE_TO_MANY constraints in dbForge software we should drag the field on the MANY table to the field on the ONE table,
	otherwise a ONE_TO_ONE relation will be created .
	
33- add a forign key constraint to a table

	ALTER TABLE Orders
	ADD CONSTRAINT fk_Orders
	FOREIGN KEY (Person_Id)
	REFERENCES Persons(Id)
	
	or another example
	
	ALTER TABLE cities
	ADD CONSTRAINT FK_city_country_Id 
	FOREIGN KEY (CountryId)
	REFERENCES countries (Id) 
	ON DELETE CASCADE 
	ON UPDATE CASCADE 
	
	IMPORTANT NOTE: the cascade is important to automatically delate the N records on N table when the primary record 
					will be deleted on the ONE table.
	
	**** in global the syntax is
	
	FOREIGN KEY Constraints
	
	InnoDB supports foreign keys, which let you cross-reference related data across tables, and foreign key constraints, which help keep this spread-out data consistent. The syntax for an InnoDB foreign key constraint definition in the CREATE TABLE or ALTER TABLE statement looks like this:

	[CONSTRAINT [symbol]] FOREIGN KEY
		[index_name] (index_col_name, ...)
		REFERENCES tbl_name (index_col_name,...)
		[ON DELETE reference_option]
		[ON UPDATE reference_option]

	reference_option:
		RESTRICT | CASCADE | SET NULL | NO ACTION
	index_name represents a foreign key ID. If given, this is ignored if an index for the foreign key is defined explicitly. Otherwise, if InnoDB creates an index for the foreign key, it uses index_name for the index name.

	Foreign keys definitions are subject to the following conditions:

	Foreign key relationships involve a parent table that holds the central data values, and a child table with identical values pointing back to its parent. The FOREIGN KEY clause is specified in the child table. The parent and child tables must both be InnoDB tables. They must not be TEMPORARY tables.

	Corresponding columns in the foreign key and the referenced key must have similar internal data types inside InnoDB so that they can be compared without a type conversion. The size and sign of integer types must be the same. The length of string types need not be the same. For nonbinary (character) string columns, the character set and collation must be the same.

	InnoDB requires indexes on foreign keys and referenced keys so that foreign key checks can be fast and not require a table scan. In the referencing table, there must be an index where the foreign key columns are listed as the first columns in the same order. Such an index is created on the referencing table automatically if it does not exist. This index might be silently dropped later, if you create another index that can be used to enforce the foreign key constraint. index_name, if given, is used as described previously.

	InnoDB permits a foreign key to reference any index column or group of columns. However, in the referenced table, there must be an index where the referenced columns are listed as the first columns in the same order.

	Index prefixes on foreign key columns are not supported. One consequence of this is that BLOB and TEXT columns cannot be included in a foreign key because indexes on those columns must always include a prefix length.

	If the CONSTRAINT symbol clause is given, the symbol value must be unique in the database. If the clause is not given, InnoDB creates the name automatically.
		
	
34- Declaring Relationship 
	Before we use AR to perform relational query, we need to let AR know how one AR class is related with another.

	Relationship between two AR classes is directly associated with the relationship between the database tables represented by the AR classes. From database point of view, a relationship between two tables A and B has three types: one-to-many (e.g. tbl_user and tbl_post), one-to-one (e.g. tbl_user and tbl_profile) and many-to-many (e.g. tbl_category and tbl_post). In AR, there are four types of relationships:

	BELONGS_TO: if the relationship between table A and B is one-to-many, then B belongs to A (e.g. Post belongs to User);
	
	HAS_MANY: if the relationship between table A and B is one-to-many, then A has many B (e.g. User has many Post);
	
	HAS_ONE: this is special case of HAS_MANY where A has at most one B (e.g. User has at most one Profile);
	
	MANY_MANY: this corresponds to the many-to-many relationship in database. An associative table is needed to break a many-to-many relationship into one-to-many relationships, as most DBMS do not support many-to-many relationship directly. In our example database schema, the tbl_post_category serves for this purpose. In AR terminology, we can explain MANY_MANY as the combination of BELONGS_TO and HAS_MANY. For example, Post belongs to many Category and Category has many Post.
	
35-  IMPORTANT NOTE: if we do not add a primary key to view, Gii does not create
     corect code for us, and update, edit, delete icons does not work correctly
    
	so ALWAYS after creating a model class based on a view , we should add a function like
	
    public function primaryKey()
    {
        return 'view_Id';
    }
	
	to our model class(IMPORTANT)
	
36- IMPORTANT: enableAjaxValidation and enableClientValidation in Yii CActiveForm Widget

	http://developer-faq.blogspot.ca/2012/12/enableajaxvalidation-and.html
	
	When enableAjaxValidation set to true, it makes the form doesn't refresh the page to validate form input. So, it will send an ajax response, when we submit the form.

	While enableClientValidation allows us to validate form input via javascript if possible.

	And don't forget to set validateOnSubmit to true in clientOptions property.

	To make it clearer, below several case given.
	1. enableAjaxValidation=false and enableClientValidation=false
	Every submission of form will refresh or request page to validate form input.

	2. enableAjaxValidation=false and enableClientValidation=true
	Every input which is possible to be validated like required field, email field will be handled by javascript, before processing to request/refresh page to server.

	3. enableAjaxValidation=true and enableClientValidation=false
	Every input will be validated by server side but will not refresh the page, it will do an ajax request for validation.

	4. enableAjaxValidation=true and enableClientValidation=true
	This one will do an ajax request after doing some possible validation via javascript, like I said before, such as checking required field or email field. And another type of validation like duplicate checking will be handle by an ajax request to server.

	This is code snippet for instantiating a Yii CActiveForm widget in case no. 4. (change _form.php view files like this)
	
	<?php
		$form = $this->beginWidget('CActiveForm', array(
					'id' => 'user-register-form',
					'enableClientValidation' => true,
					'enableAjaxValidation' => true,
					'clientOptions' => array(
						'validateOnSubmit' => true,
					),
				));
	?>
	
	or if you are using Yiibooster
	
	<?php
		$form = $this->beginWidget('bootstrap.widgets.TbActiveForm', array(
					'id' => 'user-register-form',
					'enableClientValidation' => true,
					'enableAjaxValidation' => true,
					'clientOptions' => array(
						'validateOnSubmit' => true,
					),
				));
	?>
	
	in addition in the controller class we should uncomment this line
	
	// Uncomment the following line if AJAX validation is needed
	// $this->performAjaxValidation($model);
	
37- to make our code beautiful we can use phpDesigner 8 portable version and

	1. Press combination: Ctrl + Shift + F1 
	2. or on the menu bar, select 'PHP' menu. Then select 'Code Beautifier for PHP' (the bottom option). 
	Do the same with CSS and HTML
	
38- another wat to make our code beautiful we can use netbeans PHP edition and press ctrl + shift + F1

39- IMPORTANT NOTE: in the development time NEVER AND NEVER activate APC or anyother caching system. it creates serious problem for
	program testing. for example always some pages will be run from cache, so debugbreak(); and small changes on code never be 
	applied on the program and it creates a lot of confusion. so again in the development time NEVER AND NEVER activate APC or anyother caching system
	
40- Using PHP's crypt() to store passwords 
	People often get confused about how to use implement a password store using crypt(). It is actually very simple but it helps to know that:

	It is safe to store the salt together with the password hash. An attacker cannot use it to make a dictionary attack easier.
	The string crypt() returns is the concatenation of the salt you give it and the hash value.
	crypt() ignores excess characters in the input salt string.
	crypt() has function signature string crypt (string $str, string $salt) and the salt string format determines the hash method. For Blowfish hashing, the format is: "$2a$", a two digit cost parameter, "$", and 22 digits from the alphabet "./0-9A-Za-z". The cost must be between 04 and 31.

	crypt('EgzamplPassword', '$2a$10$1qAz2wSx3eDc4rFv5tGb5t')
		>> '$2a$10$1qAz2wSx3eDc4rFv5tGb5e4jVuld5/KF2Kpy.B8D2XoC031sReFGi'	
		
41- for AES enc/dec we should create a class like

<?

    class AES
    {
        public static function aes128Encrypt($key, $data) {
          if(16 !== strlen($key)) $key = hash('MD5', $key, true);
          $padding = 16 - (strlen($data) % 16);
          $data .= str_repeat(chr($padding), $padding);
          return mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, str_repeat("\0", 16));
        }
         
        public static function aes256Encrypt($key, $data) {
          if(32 !== strlen($key)) $key = hash('SHA256', $key, true);
          $padding = 16 - (strlen($data) % 16);
          $data .= str_repeat(chr($padding), $padding);
          return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, str_repeat("\0", 16)));
        }
         
        public static function aes128Decrypt($key, $data) {
          if(16 !== strlen($key)) $key = hash('MD5', $key, true);
          $data = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, str_repeat("\0", 16));
          $padding = ord($data[strlen($data) - 1]); 
          return substr($data, 0, -$padding); 
        }
         
        public static function aes256Decrypt($key, $data) {
          $data = base64_decode($data);
          if(32 !== strlen($key)) $key = hash('SHA256', $key, true);
          $data = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, str_repeat("\0", 16));
          $padding = ord($data[strlen($data) - 1]); 
          return substr($data, 0, -$padding); 
        }
    }


42- How to upload image(photo), and path entry in database with update functionality see( there are some small typing errors in this page)

	http://www.yiiframework.com/wiki/349/how-to-upload-image-photo-and-path-entry-in-database-with-update-functionality/
	
	OR EVEN BETTER look at ( no error at all)
	
	travelagancy project-> country (create/update/view/admin)	

43- in PhpED we should select tools->settings->IDE->IDE settings ===> default file encoding : ISO-8859-1 and default file format: Unix 
		
44- to change the caption of a bootstrap.widgets.TbButton object (Yiibooster button) after clicking on it

	a) add this line to properties of button on the php view file (e.g. _form.php) -->  'id'=>'save_update',
	e.g.
		<div class="form-actions">
			<?php $this->widget('bootstrap.widgets.TbButton', array(
				'buttonType'=>'submit',
				'type'=>'primary',
				'id'=>'save_update', // add this line to add an id to the button
				'label'=>$model->isNewRecord ? 'Create' : 'Save',
			)); ?>
		</div>
	b) add this jQuery code to the end of php view file (e.g. _form.php)
	
		<script>
			// jQuery function to change the caption of the button after click
			$('#save_update').click(function() {
				$('#save_update').html('Saving, Please wait ....');
				//$('#save_update').attr('disabled', true);
			});
		</script>
		
45- in PHP the way we can send a array or variable to the user as a file(browser will download this file) is 

		filename="download.txt";
		header("Content-type: application/octet-stream");
		header("Content-disposition: attachment;filename=$filename");
		
		echo $my_array;
	
	in which $my_array is the file or any information we are going to bedownloaded as txt file on the users machine. 
	if we are going to send an CSV in the $my_array array we change the abouve lines too
	
		filename="download.xls";
		header("Content-Type: application/xls");
		header("Content-disposition: attachment;filename=$filename");
		
		echo $my_array;
	
	for zip files
	
		filename="download.zip";
		header("Content-Type: application/zip");
		header("Content-disposition: attachment;filename=$filename");
		
		echo $my_array;
	
	and so on...
	
46- how to use date picker and range date picker in yii booster:

	// date picker
	<?php echo $form->datepickerRow($model, 'TakeoffDate', array('options'=>array('format' => 'yyyy-mm-dd'), 'hint'=>'Click inside to select a date! ', 'prepend'=>'<i class="icon-calendar"></i>')); ?>

	// date range picker
	<?php echo $form->dateRangeRow($model, 'dateRangeField',
	array('hint'=>'Click inside! An even a date range field!.',
	'prepend'=>'<i class="icon-calendar"></i>',
	'options' => array('callback'=>'js:function(start, end){console.log(start.toString("MMMM d, yyyy") + " - " + end.toString("MMMM d, yyyy"));}')
	)); ?>	
	
	IMPORTANT NOTE: Google chrome will be locked if we use Yiibooster Timepicker but firefox works with it greatly
	
	for more information abouy Yiibooster components go to: 
	
		http://yii-booster.clevertech.biz/components.html
	
	
47- IMPORTANT NOTE: How we can change the parameters and options of a YiiBooster control

	Lets learn by an example , we are going to change the date format of YiiBooster datepicker component
	the default format is mm/dd/yyyy but we like to be yyyy-mm-dd
	
	first we open the /protected/extensions/bootstrap/widgets/TbDatepicker.php file
	then we realize that date is assigned like
	
	if (!isset($this->options['format']))
			$this->options['format'] = 'mm/dd/yyyy';
	
	there are two methods to change the date format
	
	a) change the $this->options['format'] = 'mm/dd/yyyy'; to $this->options['format'] = 'yyyy-mm-dd';
	
	b) use date picker in our view classes in this form(this is better method)
	
	<?php echo $form->datepickerRow($model, 'StartDate', array('options'=>array('format' => 'yyyy-mm-dd'), 'id' =>'start_date', 'hint'=>'Click inside to select a date! ', 'prepend'=>'<i class="icon-calendar"></i>')); ?>
	
	
48- IMPORTANT NOTE:  Yii's ajax validation makes the data entry slow, so sometimes we should disable that

	<?php $form=$this->beginWidget('bootstrap.widgets.TbActiveForm',array(
	'id'=>'flight-form',
	'enableClientValidation' => true,
    'enableAjaxValidation' => false, // disable ajax validation
    'clientOptions' => array(
        'validateOnSubmit' => true,
    ),
)); ?>

49- Ajax: to test that the type of request is Ajax or not:

	if(isset($_POST['ajax']) && $_POST['ajax']==='flight-form') // country-form = the id of the caller CActiveForm or bootstrap.widgets.TbActiveForm
	{
		// do you things here
	}

50-  it is better to use Firefox + Firebug + FireQuery + Selenium IDE for development

51-  to run a jquery function after page load we should write

	<script>
	$(function(){
		// $('#save_update').html('Save');
		// other codes come here
	});
	</script>
	
	and to run a code after clicking a button:
	
	<script>
	// jQuery function to change the caption of key after click
	$('#save_update').click(function() {
		$('#save_update').html('Saving, Please wait ....');
	});
	</script>

52- call by reference is change from php 5.3. For example, use:

	// Right way!
	function myFunc(&$arg) { }
	myFunc($var);
	
	Rather than:

	// Wrong way!
	function myFunc($arg) { }
	myFunc(&$arg);
    
53- for an advance menu package with sub menu support in Yii

	http://www.yiiframework.com/extension/mbmenu#hh3
	
54- important note: in win XAMPP 1.8.1 has bug. use XAMPP 1.7.7 instead.

55- IMPORTANT:
	when we add a field to a table in DB after creating the model class of that table using Gii, the nmodel class has no idea about
	changes on the table in DB , so in the "code navigator window" we cannot see the name of that field . to force model class to update
	itself with DB, we should add this line to seach() function on the model class
	
		$criteria->compare('New_field_name', $this->New_field_name); 
		
		after adding this line and saving model class, the "New_field_name" will appear on the code navigate window.
		
56- to kill a process in win7 we should open an ADMINISTRATIVE command prompt and type

		Taskkill /PID 2704 /F
		
		in which 2704 is the processID
		
57- jQuery call to php function

	From jQuery you can only call php script with this function. Like that:
	$.ajax({
	   url: 'hello.php',
	   success: function (response) {//response is value returned from php (for your example it's "bye bye"
		 alert(response);
	   }
	});

	hello.php
	
	<?php
    echo "bye bye"
?>

58- VERY IMPORTANT: An Easy Solution for Dependent dropDownList Using AJAX  --> NOTE: on 168 I gave easier and cleaner solution

	http://www.yiiframework.com/wiki/429/an-easy-solution-for-dependent-dropdownlist-using-ajax/
	
59- Often happens to have the need of change a part of the page with ajax.

	http://www.yiiframework.com/wiki/87/ajax-update/
	
60- Ajax form submiting in Yii

	http://www.yiiframework.com/wiki/388/ajax-form-submiting-in-yii/

61- some linux notes

	/    =  root directory
	./   =  current directory
	../  =  parent directory
	~/   =  home directory
	
62- Pretty much - by putting that / at the start, you're saying "Start at the root directory, and work along"

	If you don't put the / at the front, you're saying "Start from the current directory"

	If you put ../ at the front, you're saying "Go back one directory and then start looking"

	And if you put ~/ at the front, you're saying "Look in my home directory"

	So, to sum up, let's say you're in the directory /etc/wibble

	If you say cd /foo/bar you're asking to go to the directory /foo/bar

	If you say cd foo/bar you're asking to go to the directory /etc/wibble/foo/bar

	If you say cd ../foo/bar you're asking to go to the directory /etc/foo/bar

	And if you say cd ~/foo/bar you're asking to go to the directory /home/yourname/wibble/foo/bar
	
63- a sample jQuery file:

	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
		<script type="text/javascript">
			$(document).ready(function () {            
				$("button").bind('click', function(){
				  alert("Button is Clicked.");
				});
				  
				// create jqxtabs.
				$('#jqxtabs').jqxTabs({ width: 550, height: 150 });
				$('#jqxtabs').bind('selected', function (event) {
					var item = event.args.item;
					var title = $('#jqxtabs').jqxTabs('getTitleAt', item);
					alert(title);
				});
			});
		</script>
	</head>
	<body>
		<button>
			Click me
		</button>
	</body>
	</html>
	
64- in MVC it is ALWAYS RECOMMENDED that use different forms for CRUD and never use one grid form both for data entry and data view
	this is the same way that Yii creates the CRUD forms.
	
65- JSON: JavaScript Object Notation.

	JSON is syntax for storing and exchanging text information. Much like XML.

	JSON is smaller than XML, and faster and easier to parse.
	
	{
	"employees": [
	{ "firstName":"John" , "lastName":"Doe" }, 
	{ "firstName":"Anna" , "lastName":"Smith" }, 
	{ "firstName":"Peter" , "lastName":"Jones" }
	]
	}

	The employees object is an array of 3 employee records (objects).
	
66-  
	<!DOCTYPE html>
	<html>
	<body>
	<h2>JSON Object Creation in JavaScript</h2>
	<p>
	Name: <span id="jname"></span><br /> 
	Age: <span id="jage"></span><br /> 
	Address: <span id="jstreet"></span><br /> 
	Phone: <span id="jphone"></span><br /> 
	</p>

	<script>
	var JSONObject= {
	"name":"John Johnson",
	"street":"Oslo West 555", 
	"age":33,
	"phone":"555 1234567"};
	document.getElementById("jname").innerHTML=JSONObject.name 
	document.getElementById("jage").innerHTML=JSONObject.age 
	document.getElementById("jstreet").innerHTML=JSONObject.street 
	document.getElementById("jphone").innerHTML=JSONObject.phone 
	</script>

	</body>
	</html>

67- tutorial about JSON (java script object notation)

	http://iviewsource.com/codingtutorials/getting-started-with-javascript-object-notation-json-for-absolute-beginners/
	
68- For user authetication, we should change the
	/protected/components/UserIdentity.php and /protected/mode/User.php files according to chapter 7 of Yii
	application development book and just add one table(tbl_user) to db. finally change some lines in
	/protected/config/main.php
	
69- authorization in Yii: powerful visual RBAC extension for Yii---> Rights

	http://www.yiiframework.com/extension/rights
	http://www.yiiframework.com/forum/index.php/topic/10556-extension-rights/page__p__51869#entry51869
		
70- Important note on installing Rigths: the users table should have a record with id = 1 and username = Admin ( with capital 'A'), 
	otherwise you cannot login to the Rigths module after log out and will get error 403.

71- to understand yii structure for Authentication and Authorization:

	http://www.yiiframework.com/doc/guide/1.1/en/topics.auth
	http://www.yiiframework.com/wiki/136/getting-to-understand-hierarchical-rbac-scheme/

72- Indexes on DB

	Indexes allow the database application to find data fast; without reading the whole table.	

	An index can be created in a table to find data more quickly and efficiently.

	The users cannot see the indexes, they are just used to speed up searches/queries.

	Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So you should only create indexes on columns (and tables) that will be frequently searched against.

	SQL CREATE INDEX Syntax

	Creates an index on a table. Duplicate values are allowed:

	CREATE INDEX index_name
	ON table_name (column_name)
	SQL CREATE UNIQUE INDEX Syntax

	Creates a unique index on a table. Duplicate values are not allowed:

	CREATE UNIQUE INDEX index_name
	ON table_name (column_name)	
	
	example
	
	CREATE INDEX PIndex
	ON Persons (LastName, FirstName)
	
	
73- MySQL Engines: InnoDB vs. MyISAM \96 A Comparison of Pros and Cons

	The 2 major types of table storage engines for MySQL databases are InnoDB and MyISAM. To summarize the differences of features and performance,

	InnoDB is newer while MyISAM is older.
	InnoDB is more complex while MyISAM is simpler.
	InnoDB is more strict in data integrity while MyISAM is loose.
	InnoDB implements row-level lock for inserting and updating while MyISAM implements table-level lock.
	InnoDB has transactions while MyISAM does not.
	InnoDB has foreign keys and relationship contraints while MyISAM does not.
	InnoDB has better crash recovery while MyISAM is poor at recovering data integrity at system crashes.
	MyISAM has full-text search index while InnoDB has not.
	In light of these differences, InnoDB and MyISAM have their unique advantages and disadvantages against each other. They each are more suitable in some scenarios than the other.

	Advantages of InnoDB

	InnoDB should be used where data integrity comes a priority because it inherently takes care of them by the help of relationship constraints and transactions.
	Faster in write-intensive (inserts, updates) tables because it utilizes row-level locking and only hold up changes to the same row that\92s being inserted or updated.
	
	Disadvantages of InnoDB

	Because InnoDB has to take care of the different relationships between tables, database administrator and scheme creators have to take more time in designing the data models which are more complex than those of MyISAM.
	Consumes more system resources such as RAM. As a matter of fact, it is recommended by many that InnoDB engine be turned off if there\92s no substantial need for it after installation of MySQL.
	No full-text indexing.
	
	Advantages of MyISAM

	Simpler to design and create, thus better for beginners. No worries about the foreign relationships between tables.
	Faster than InnoDB on the whole as a result of the simpler structure thus much less costs of server resources.
	Full-text indexing.
	Especially good for read-intensive (select) tables.
	
	Disadvantages of MyISAM

	No data integrity (e.g. relationship constraints) check, which then comes a responsibility and overhead of the database administrators and application developers.
	Doesn\92t support transactions which is essential in critical data applications such as that of banking.
	Slower than InnoDB for tables that are frequently being inserted to or updated, because the entire table is locked for any insert or update.
	The comparison is pretty straightforward. InnoDB is more suitable for data critical situations that require frequent inserts and updates. MyISAM, on the other hand, performs better with applications that don\92t quite depend on the data integrity and mostly just select and display the data.
			
74-	a nice online website to create RBAC diagrams---> http://yuml.me/diagram/scruffy/class/draw

	for example run this code on that site
	
	// Cool travelagency rbac Diagram

	[Admin (Role)]->[FlightHotelOperator (Role)]
    [Admin (Role)]->[Admin tasks (Task)]
	[Admin tasks (Task)]->[CRUD RBAC rights (Operation)]
	[Admin tasks (Task)]->[Change Themes (Operation)]
	[Admin tasks (Task)]->[Create Reports (Operation)]
	[Admin tasks (Task)]->[Print Reports (Operation)]
	[FlightHotelOperator (Role)]->[HotelOperator (Role)]
	[FlightHotelOperator (Role)]->[FlightOperator (Role)]
	[HotelOperator (Role)]->[CRUD Hotel Tables (Operation)]
	[HotelOperator (Role)]->[AuthenticatedUser (Role)]
	[FlightOperator (Role)]->[CRUD Flight Tables (Operation)]
	[FlightOperator (Role)]->[AuthenticatedUser (Role)]
	[AuthenticatedUser (Role)]->[Reserve hotels and flights (Operation)]
	[AuthenticatedUser (Role)]->[GuestUser (Role)]
	[GuestUser (Role)]->[Search hotels and flights (Operation)]
	[AuthenticatedUser (Role)]->[CRUD his own information (Operation)]
	[GuestUser (Role)]->[Register (Operation)]
	[AuthenticatedUser (Role)]->[login/logout (Operation)]
	
75- RESTfull webservice in Yii

	http://www.yiiframework.com/wiki/175/how-to-create-a-rest-api/
	http://www.yiiframework.com/extension/restfullyii/#hh1
		
76- STEP BY STEP INSTALLATION AND USAGE OF 'RIGHTS' RBAC

	a) create user authetication according to Chapter 7 of Agile app development using Yii book
	
	b) download "Rights" from http://www.yiiframework.com/extension/rights
	
	c) unzip and copy it on the /protected/modules/ folder (create modules forlder by yourself)
	
		IMPORTANT: configuration file is /protected/modules/rights/RightsModule.php
		
	d) Add the following lines to your application\92s configuration (protected/config/main.php): 
 
		'import'=>array( 
		   ...... 
		   'application.modules.rights.*', 
		   'application.modules.rights.components.*',    // Correct paths if necessary.  
		), 
		...... 
		'components'=>array( 
		   ...... 
		   'user'=>array( 
			  'class'=>'RWebUser',  // Allows super users access implicitly. 
			  ...... 
		   ), 
		   'authManager'=>array( 
			  'class'=>'RDbAuthManager',  // Provides support authorization item sorting. 
			   ...... 
		   ), 
		   ...... 
		), 
		'modules'=>array( 
		   'rights'=>array( 
			  'install'=>true,  // Enables the installer. 
		   ), 
		), 
		
	e) the users table should have a record with id = 1 and 
		username = Admin ( with capital 'A'), otherwise you cannot login
		to the Rigths module after log out and will get error 403.
		
	f) create some new users in the "users" table for later use.
	
	g) login as 'admin' user to your Yii application (important. nobody except admin can run 'Rights' module), then navigate to
		
		http://your_aplication_url/index.php?r=rights
		
		to install "Rights". It will be installed automatically and will add 4 tables to DB and shows the success message.
		
	h) create some "operations" in "Rights" GUI according to your program's logic.
	
	i) create some "tasks" in "Rights" GUI according to your program's logic.
	
	j) create some "Roles" in "Rights" GUI according to your program's logic. (there are 3 predefined roles there too)
	
	k) on the "permissions" page of 'Right', first click on  'Generate items for controller actions' link to see 
		the complete list of all of actions in all controllers of your application. then we can assign which Role has
		access to which action. Inheritance will applied automatically. This page is a little slow, after clicking on 
		any 'assign' link, it takes some seconds that it will change to "Revoke" that shows the task is complete.
		do all of required assignments carefully.
		
	m) On the "Assignments"  page of "Rights", do some "Assignments" in GUI according to your program's logic. in this step 
		we adds roles, tasks, or operations to the users we have created in the "users" table.
		
	n) on the controller classes we should apply these changes:
		
		-- IMPORTANT NOTE: the controllers that everybody should have access to them like SiteController should be left without any chnages.
		
		-- Change base class of other Controllers to 'RController'. for example
		
				class RoomController extends Controller 
			
			should be changed to 
				
				class RoomController extends RController
			
		-- change filters() function on all of CHANGED Contoller clases to this 
			
			public function filters()
			{
				 return array(
					'rights',
				);
			}
			
			IMPORTANT: Do not change SiteController and other controller classes that are NOT extended from 'RController'.
			
		-- delete accessRules() function from controllers. 

		-- if we are going to apply very specific rules and exceptions
			like "Change my own data" rule, we should write this function after function filters()
			
			public function allowedActions() 
			{ 
			   return 'index, suggestedTags'; //actionIndex() and actionSuggestedTags() are allowed for all users now
			} 
			
			Note1:  Allowed actions are case-insensitive and you may use asterix (*) to allow access to all actions.
			
			Note2: I sugest all of actions that should be down as Guest user should be put on Sitecontroller or other controllers that
				   are not extended fromRController base class, because Guest in Rights is different with default Guest user in Yii and
				   this creates a problem. so put all of functions that even guest should have access to them like 'reset passowrd',
				   'login/logout', 'register in site' on site controller or other controllers that  are not extended fromRController base class.
				   
	o) run your application, you can see that different users have access to different parts of program. and RBAC has been
		implemented correctly.
		
	p) optional steps:
		
		-- create a model class for Authassignment table using Gii
		
		-- change authenticate function in protected/components/IWebUser to thsi
		
			    public function authenticate()
				{
					$user=User::model()->findByAttributes(array('username'=>$this->username));
					if($user===null)
					{
						$this->errorCode=self::ERROR_USERNAME_INVALID;
					}
					else 
					{
						if($user->password!==$user->encrypt($this->password))
						{
							$this->errorCode=self::ERROR_PASSWORD_INVALID;
						}
						else
						{
							$this->_id = $user->id;
							if(null===$user->last_login_time)
							{
								$lastLogin = time();
							}
							else
							{
								$lastLogin = strtotime($user->last_login_time);
							}
							$this->setState('lastLoginTime', $lastLogin);  // save in session
							
							
							// save roles of user  (By kamran)
							// in other sections we can read
							// the roles with this command:
							// $a = Yii::app()->user->roles;
							
							$criteria=new CDbCriteria;
							$criteria->select = 'itemname';
							$criteria->compare('userid',$this->_id,true);
							$roles = Authassignment::model()->findAll($criteria);
							
							//convert roles object to array of name of roles
							foreach($roles as $key => $value)
							{
								$rolesArray[] = $roles[$key]->itemname; 
							}
							$this->setState('roles',$rolesArray);  // save in session
							$this->errorCode=self::ERROR_NONE;    
						}
					}
					return !$this->errorCode;
				}
				
			now inside the program, we can get the roles of the current user using this command:
			
					$a = Yii::app()->user->roles;
					
		q) To change the theme of Rights module we should write this line in init() function of RightsModule.php file
	
			public function init()
			{
				
				/ apply the site theme to Rights module
				$this->appLayout = 'webroot.themes.'. Yii::app()->theme->name .'.views.layouts.main';
				...........
			}
			
		and a theme should be defined in the /config/main.php too
		
			'theme'=>'freshy2', 
			
		r) after installing Rights, to avoid any data damage rename modules/rights/controller/InstallController.php file to
			modules/rights/controller/InstallController0.php	
					
	
		s) to restiric a user to just change his own information
			
			// This functions allows user just change his own information
			// Kamran
			public function actionUpdateMyself($id)
			{
				// restric user just to his own loggen in Id and not any other Id
				if($id != Yii::app()->user->id)
				{
				  $msg = 'Your are not allowed to change the information of other users.';
				  Yii::app()->user->setFlash('error', $msg);
				  $this->render('confirm');  
				}
				else
				{
					$model=$this->loadModel($id);
					$model->password_repeat = $model->password;
					
					if(isset($_POST['User']))
					{
						$model->attributes=$_POST['User'];
						if($model->save())
						{
							$msg = 'Your information is changed successfully.';
							Yii::app()->user->setFlash('success', $msg);
							$this->render('confirm'); 
							return;
						}    
					}
					
					$this->render('update',array(
						'model'=>$model,
					));
				}
			}
		
77-	get baseURL in Yii

	 $a = Yii::app()->request->baseUrl;
		
78- some global variables in yii

		Yii::app()->homeUrl           		---->  /index.php
		Yii::app()->user->isGuest     		---->  1
		Yii::app()->user->name        		---->  Guest
		Yii::app()->user->id          		---->
		Yii::app()->request->baseUrl  		---->  http://kamran.dev.travelagancy.com:81/
		Yii::app()->theme->baseUrl    		---->  /themes/kamran_theme1
		Yii::app()->createAbsoluteUrl('') 	---->  http://kamran.dev.travelagancy.com:81/index.php
		Yii::app()->basePath         		---->  G:\GitHub\travelagency\protected 


79- an example of findByAttributes()

	$user=User::model()->findByAttributes(array('username'=>$this->username));
	$user=User::model()->findAllByAttributes(array('username'=>$this->username, 'password'=>$this->password));
	
80- free themes for Yii
	http://yiithemes.mehesz.net/
	http://www.yiiframework.com/forum/index.php/topic/9448-yii-themes/page__st__20__p__93505#entry93505
	
	
81- Converting an Artisteer Theme to Yii ( http://www.yiiframework.com/wiki/188/converting-an-artisteer-theme-to-yii/ )
	
	There are two approaches to converting an Artisteer theme. The first is to simply copy an existing Artisteer \96 based Yii theme, overlay the CSS and images, then make any necessary tweaks to the layout files. This is undoubtedly the fastest route, but won't teach you as much as doing it from scratch. That's ok. Sometimes getting the job done is the top priority. The second approach is more general and will apply to some extent to other HTML templates that you may want to convert. I'll be covering the first approach in detail, while the second will be more of a general discussion.

	Artisteer vs Yii 
	Artisteer can be used to generate themes for Drupal, Joomla, and other CMSes. It can also generate HTML templates. It is the HTML template that can be converted to an Artisteer theme.

	Artisteer files:
	page.html
	style.css
	style.ie6.css
	style.ie7.css
	script.js
	images   (subdirectory)
	 
	Yii theme files:
	theme_name (directory)
		css (subdirectory)
			<contains various css files, possibly image files>
		views (subdirectory)
			layouts (subdirectory)
				main.php
				column1.php
				column2.php
				...
			site (subdirectory)
				index.php
			system (subdirectory)
	The Artisteer files are straightforward. You have a set of stylesheets (i.e. CSS files) and images to support them. You also have a file called page.html. Page.html demonstrates the use of the various styles supported by the template. For example, you'll see the H1 tag, how links are styled, and the default format for HTML tables. You'll also see Artisteer specific classes demonstrated. I will revisit this file in more detail when I cover the second approach.

	The Yii theme files are a little more involved. The css subdirectory is obvious. In many ways, CSS is like a structural foundation. The views, then, are the walls and the doors, the windows and the floors that complete the theme. Layouts are those special views that define the header, the footer, and column layouts. (see the Yii Definitive Guide for more info)

	Approach #1: Fast and Furious 
	So, you've generated an Artisteer theme that you like and exported it as an HTML template. Or you've downloaded one of the freebies online. Step 1: Download a copy of one of the Artisteer \96 based themes from http://yiithemes.mehesz.net/ If possible, find one that is structured close to the one that you want to convert. For example, if your menu position is below the header, you'll do less editing if the theme you download as a starting point already matches. Install the theme according to the instructions. When you're sure the theme works, move on to the next step.

	Step 2: Make a copy of the working theme from Step 1 and give it a new name.

	Step 3: Remove the css/images subdirectory from the new theme

	Step 4: Copy the Artisteer files from the generated HTML template into the css directory. Overwrite any files with matching names. Note: form.css is from the standard Yii install. Artisteer does not provide forms CSS in their generated template.

	Step 5: Set 'theme'=>'yournewtheme' in the main.php config file and tweak! Basically, go to the home page of your webapp (something like http://localhost/myapp/). You should see a one column display very similar to what you get if you view page.html. This page is generated from yourtheme/views/site/index.php (it will say so on the screen). When present in your theme, this file takes precedence over your webapp's site/index.php.
	Compare the browser display (i.e. http://localhost/myapp/) with an open window/tab of page.html. If the menu, for example, is in the wrong location, viewing the HTML source for both web pages and noting the differences will help you alter the various layout files. In particular, note which DIV tags are nested within others and which blocks of tags follow each other. You might even be missing a set of tags if a header is included in one theme, but not in another.
	If you need the column2.php layout (or others of your own design), you'll need to setup a test to use it. There is dummy info included in the column2.php layout to further demonstrate use of Artisteer CSS classes.

	Second Approach: More General 
	A more general approach to converting HTML templates to Yii themes can be summed up in the following steps:

	Step 1: Find a theme/template you like and download it.

	Step 2: Find the \93demo\94 page that shows the various CSS styles and formatting. Page.html, index.html, etc. and view the source.

	Step 3: Copy the header into a new text file. This will become your main.php file in the layout subdirectory. Replace any references to files on the filesystem with paths that take into account the location of the theme. For example,

	<script type="text/javascript" src="<?php echo Yii::app()->theme->baseUrl; ?>/css/script.js"></script>
	Step 4: Examine the source and figure out where to separate the HTML that should be the rest of main.php and what would go into a single column display (i.e. column1.php). Note: Upon execution, column1.php gets inserted into main.php replacing the placeholder variable $content. (Examine any existing theme to get an idea of how this works.) You have to understand how layouts work and the resulting HTML before you can successfully look at a file and know where to separate. Of course, you can always try something and if it isn't quite right, adjust it.

	Step 5: Create other layouts as needed.

	Final Thoughts 
	That covers converting Artisteer themes and in general, other HTML templates. This document does not pretend to cover every detail of every step, but if you take the time to look at HTML source, existing themes, and this guide, you'll be well on your way to converting your own themes.
			
	

82- MbMenu is a professional menu for Yii. we can download it from Yii website and in our
	project in protected\views\layout\main.php
	
	replace
	
	<div id="mainmenu">
		<?php $this->widget('zii.widgets.CMenu',array(
			'items'=>array(
				array('label'=>'Home', 'url'=>array('/site/index')),
				array('label'=>'About', 'url'=>array('/site/page', 'view'=>'about')),
				array('label'=>'Contact', 'url'=>array('/site/contact')),
				array('label'=>'Login', 'url'=>array('/site/login'), 'visible'=>Yii::app()->user->isGuest),
				array('label'=>'Logout ('.Yii::app()->user->name.')', 'url'=>array('/site/logout'), 'visible'=>!Yii::app()->user->isGuest)
			),
		)); ?>
	</div><!-- mainmenu -->
	
	with
	
	
	<div id="mainMbMenu">
    <?php 
       
        $visibility = MenuVisibility::getMenuVisibility();
        
        $this->widget('application.extensions.mbmenu.MbMenu',array(
            'items'=>array(
                // show 'Home' menu to all users 
                array('label'=>'Home', 'url'=>array('/site/index')),
                
                // show 'Search' menu to all users 
                array('label'=>'Search',
                  'items'=>array(
                    array('label'=>'Hotels', 'url'=>array('/search/hotel','view'=>'admin')),
                    array('label'=>'Flights', 'url'=>array('/search/flight','view'=>'admin')),
                  ),
                ),
                
                // show 'Global info' menu to NONE guest users
                array('label'=>'Global info', 'visible' => $visibility['General'],
                  'items'=>array(
                    array('label'=>'Users\' Management', 'url'=>array('/user/admin','view'=>'admin')),
                    array('label'=>'Countries', 'url'=>array('/country/admin','view'=>'admin')),
                    array('label'=>'Cities', 'url'=>array('/city/admin','view'=>'admin')),
                  ),
                ),
                
                // show 'Flight info' menu to admin and Flight_operator users 
                array('label'=>'Flight info', 'visible' => $visibility['Flight'],
                  'items'=>array(
                    array('label'=>'Flights', 'url'=>array('/flight/admin','view'=>'admin')),
                    array('label'=>'Airplanes', 'url'=>array('/airplane/admin','view'=>'admin')),
                    array('label'=>'Airports', 'url'=>array('/airport/admin','view'=>'admin')),
                    array('label'=>'Airplane Specifications', 'url'=>array('/airplaneSpecification/admin','view'=>'admin')),
                    array('label'=>'Airlines', 'url'=>array('/airline/admin','view'=>'admin')),
                    array('label'=>'Seats', 'url'=>array('/seat/admin','view'=>'admin')),
                    array('label'=>'Clients', 'url'=>array('/client/admin','view'=>'admin')),
                  ),
                ),
                
                // show 'Hotel info' menu to admin and Hotel_operator users 
                
                array('label'=>'Hotel info', 'visible' => $visibility['Hotel'], 
                  'items'=>array(
                    array('label'=>'Hotels', 'url'=>array('/hotel/admin','view'=>'admin')),
                    array('label'=>'Rooms', 'url'=>array('/room/admin','view'=>'admin')),
                    array('label'=>'Room Types', 'url'=>array('/roomType/admin','view'=>'admin')),
                    array('label'=>'Clients', 'url'=>array('/client/admin','view'=>'admin')),
                  ),
                ),
                
                /* a menu with SUB SUB MENU
                array('label'=>'Test',
                  'items'=>array(
                    array('label'=>'Sub 1', 'url'=>array('/site/page','view'=>'sub1')),
                    array('label'=>'Sub 2',
                      'items'=>array(
                        array('label'=>'Sub sub 1', 'url'=>array('/site/page','view'=>'subsub1')),
                        array('label'=>'Sub sub 2', 'url'=>array('/site/page','view'=>'subsub2')),
                      ),
                    ),
                  ),
                ),
                */
                // show 'Hotel info' menu to all users
                array('label'=>'Contact', 'url'=>array('/site/contact'),
                  'items'=>array(
                    array('label'=>'Contact us', 'url'=>array('/site/contact')),
                    array('label'=>'About us', 'url'=>array('/site/about')),
                  ),
                ),
                // show 'Hotel info' menu to all users 
                array('label'=>'Admin Tasks', 'visible' => $visibility['Admin'],
                  'items'=>array(
                    array('label'=>'RBAC', 'url'=>array('/rights/assignment/','view'=>'view')),
                    array('label'=>'Create Reports', 'url'=>array('/report/admin','view'=>'admin')),
                    array('label'=>'Change Forms', 'url'=>array('/changeForm/admin','view'=>'admin')),
                  ),
                ),
                
                array('label'=>'Login', 'url'=>array('/site/login'), 'visible'=>Yii::app()->user->isGuest),
                array('label'=>'Logout ('.Yii::app()->user->name.')', 'url'=>array('/site/logout'), 'visible'=>!Yii::app()->user->isGuest),
            ),
    )); ?>	
	</div><!-- mainMbMenu -->
	
	IMPORTANT Note: to change the color of MbMenu edit this css file \protected\extensions\mbmenu\source\mbmenu.css
	
83- changing theme in Yii according to type of user
	
	We can't configure multiple themes in config.php file, we can do this in your controller:

	public function init()
	{
	   if(Yii::app()->user->isGuest)
		  Yii::app()->theme = 'bluebox';
	   else
		  Yii::app()->theme = 'classic';

	   parent::init();
	}

	
84- to apply a new theme to a module in Yii, we should write this line on the init() fuction of the module:

	class RightsModule extends CWebModule
	{
		.........
		
		public function init()
		{
			// Set the theme
			Yii::app()->theme = 'MyTheme';
			............
		}
		..........
	}
	
	BUT somethimes it does not work for example for Rights module we should write
	
		public function init()
		{
			
			/ apply the site theme to Rights module
			$this->appLayout = 'webroot.themes.'. Yii::app()->theme->name .'.views.layouts.main';
			...........
		}
		and a theme should be defined in the /config/main.php too
		
		'theme'=>'freshy2', 
		
		
85- put a text in transparent box
			
		http://www.w3schools.com/css/css_image_transparency.asp
		
	
		<html>
		<head>
		<style>
		div.background
		  {
		  width:500px;
		  height:250px;
		  background:url(klematis.jpg) repeat;
		  border:2px solid black;
		  }
		div.transbox
		  {
		  width:400px;
		  height:180px;
		  margin:30px 50px;
		  background-color:#ffffff;
		  border:1px solid black;
		  opacity:0.6;
		  filter:alpha(opacity=60); /* For IE8 and earlier */
		  }
		div.transbox p
		  {
		  margin:30px 40px;
		  font-weight:bold;
		  color:#000000;
		  }
		</style>
		</head>

		<body>

		<div class="background">
		<div class="transbox">
		<p>This is some text that is placed in the transparent box.
		This is some text that is placed in the transparent box.
		This is some text that is placed in the transparent box.
		This is some text that is placed in the transparent box.
		This is some text that is placed in the transparent box.
		</p>
		</div>
		</div>

		</body>
		</html>
		
86- IMPORTANT NOTE: catching problems in Yii applications:

	when I edited a CSS in Yii, the results never apply to HTML even after ctrl+F5 on the browser. I tried many times and still the color
	was unchanged. the soultion is 'DELETING EVRYTHING FROM"ASSESTS" FOLDER OF PROJECT'. after that if we refresh the page, our new source 
	code will be shown.
	when we are changing javascript and CSS files, this will happen a alot.
	
	
87- The best way to add a transparent background picture to a theme:

	a) copy background.jpg file in \themes\kamran_theme1\css\ folder
	
	b) open \themes\kamran_theme1\css\main.css file and change body {} section of it like below
	
	body
	{
		margin: 0;
		padding: 0;
		color: #555;
		font: normal 10pt Arial,Helvetica,sans-serif;
		/*background: #EFEFEF;*/
		
		/* background picture (kamran)*/
		background-image: url( 'background.jpg' );
		background-repeat: no-repeat;
		background-attachment: fixed;
		background-position: top center;
		
		/* backgound transparency 80% (kamran)*/
		opacity:0.8;
		filter:alpha(opacity=80); /* For IE8 and earlier */
	}
	
	These lines will create 80% transparency to ANY THEME that has background picture. Even mosules like 
	"Rights" will have transparency in this way.
	

88- ANOTHER WAY to change the transparency of our main screen on Yii, supposing we are using YiiBooster
	we should change g:\GitHub\travelagency\protected\extensions\bootstrap\assets\css\bootstrap.css file
	
	find  body{  ... } section on it and add these lines to end of body{} section
	
	opacity:0.8;
    filter:alpha(opacity=80); /* For IE8 and earlier */
	
	but the first method is better.
	
	
88- to change the theme of website using code in the siteController.php write

			// changes the theme of website
			public function actionChangeTheme($name)
			{
			   Yii::app()->theme = $name;
			   
			   // save theme name on session
			   Yii::app()->session['currentTheme']= $name;
			   
			   $this->render('index');
			}	
			
		the next step is in ALL contollers we should add an init() function like
	
		public function init() 
		{
			// apply the theme dynamically
			$theme=Yii::app()->session['currentTheme'];
			if (!empty($theme))
				Yii::app()->theme=$theme;
		
			// if our class extends a class, we need this line too
			parent::init();
		}
		
		if a controller has already has init() function, just add these lines to the first of init() function of it:
		
			// apply the theme dynamically
			$theme=Yii::app()->session['currentTheme'];
			if (!empty($theme))
				Yii::app()->theme=$theme;
				
	now in the program code we can change the theme using this call
	
		http://kamran.dev.travelagancy.com:81/index.php?r=site/changeTheme/name/kamran_theme1

89- to handle cookies, we can create a new class like below and save it on the components folder


	  <?php
  
		class MyCookie extends CWebUser
		{
			public static function myHasCookie($name)
			  {
				return !empty(Yii::app()->request->cookies[$name]->value);
			  }

			  public static function myGetCookie($name)
			  {
				return Yii::app()->request->cookies[$name]->value;
			  }

			  public static function mySetCookie($name, $value)
			  {
				$cookie = new CHttpCookie($name,$value);
				Yii::app()->request->cookies[$name] = $cookie;
			  }

			  public static function myRemoveCookie($name)
			  {
				unset(Yii::app()->request->cookies[$name]);
			  }
		}
		
		in our code we can save data in cookie like
			
			// save theme name on user's pc
			MyCookie::mySetCookie('theme',$name);
	   
	   end retrieve like
	   
			$theme=MyCookie::myGetCookie('theme');
			
90- session variables in Yii

	saving a variable in session
		
		// save $name on session
       Yii::app()->session['name']= $name;
	
	restoring variable
	
		$name=Yii::app()->session['name'];
		
91- in Yii we should not use class constructor for Controllers' initialization and instead we should have an init() function like this

	public function init() 
	{
		// do you init here
		//.............
	
		// if our class extends a class, we need this line too
		parent::init();
	}
	
	but for normal clases that we create by ownself and does not extends the Yii's classes, we can have constructor as ususal
	
	
92- Integrating Wordpress and Yii,Working Out The Details. 
	
		http://www.yiiframework.com/wiki/382/integrating-wordpress-and-yii-working-out-the-details/
		
93- Include Yii framework in a Joomla module

		http://www.yiiframework.com/wiki/137/include-yii-framework-in-a-joomla-module
		
94- codelobster pro 4.3.3 is a PHP IDE for Yii and jQuery and Joomla development (125$) --> very handy and easy to work with Yii

95- How to work with flash messages

	Set your messages in a controller:
	
	Yii::app()->user->setFlash('success', "Data1 saved!");
	Yii::app()->user->setFlash('error', "Data2 failed!");
	Yii::app()->user->setFlash('notice', "Data3 ignored.");

	Display them in your view:

	<?php
		foreach(Yii::app()->user->getFlashes() as $key => $message) {
			echo '<div class="flash-' . $key . '">' . $message . "</div>\n";
		}
	?>

	
96- for sending simple emails we can use mail() function that is s pear function.
	
	
97- Sending Email in Yii based on a view
	
			http://www.yiiframework.com/extension/email/
		
		IMPORTANT NOTE: SMTP is NOT installed on Win7 by default, use this article to install Gmail support on win 7
		
			http://digiex.net/guides-reviews/guides-tutorials/application-guides/544-configuring-php-under-windows-use-gmail-external-smtp-server-ssl.html
		
		or 
		
		you should use a big package from MS website to add SMTP support to win7 PRO and ENTRPRISE only!!!
		
		IIS 7 that comes with Windows 7 does not include an SMTP server by default. But you can get it by installing the remote admin tools from here:
		 
			http://support.microsoft.com/kb/974877/en-us[^]
		 
		Once you do that, here's how you can configure SMTP:
		 
			http://technet.microsoft.com/en-us/library/cc772058(WS.10).aspx[^]
		
		otherwise you will get error when you try to send email with above component
		
98- Transactions on Yii:
	when we are going to be sure that more than one DB action should be done correctly and when Evene one of them is not correct, we should
	roolback ALL, transactions should be used. 
	
	Using Transaction with AR 
	
	Every AR instance contains a property named dbConnection which is a CDbConnection instance. We thus can use the transaction feature provided by Yii DAO if it is desired when working with AR:

		$model=Post::model();
		$transaction=$model->dbConnection->beginTransaction();
		try
		{
			// find and save are two steps which may be intervened by another request
			// we therefore use a transaction to ensure consistency and integrity
			$post=$model->findByPk(10);
			$post->title='new post title';
			if(!$post->save())
			{
				$msg = 'Error in save post.';
                Yii::app()->user->setFlash('error', $msg);
				
				// raise an exception
                throw new CException($msg);
			}
			
			$user=User::model()->findByPk(5);
			$user->title='new user title';
			if(!$user->save())
			{
				$msg = 'Error in save user.';
                Yii::app()->user->setFlash('error', $msg);
				
				// raise an exception
                throw new CException($msg);
			}
			
			$transaction->commit();
			$model->unsetAttributes(); //unset attributes 
		}
		catch(Exception $e)
		{
			$transaction->rollback();
			
			// show error message
		    $msg = $e->getMessage();
            Yii::app()->user->setFlash('error', $msg);
		}
		
		
99- adding catcha in yii is very simple

	a) in the model class add this public variable
		
		public $verifyCode;  
	
	   and add these rules to the rules() function

		// verifyCode needs to be entered correctly
        array('verifyCode', 'captcha', 'allowEmpty'=>!CCaptcha::checkRequirements()),
		array('verifyCode', 'required'),

	b) in the view (_form.php) add these lines
	
		<?php if(CCaptcha::checkRequirements()): ?>
		<div class="row">
			<?php echo $form->labelEx($model,'verifyCode'); ?>
			<div>
			<?php $this->widget('CCaptcha'); ?>
			<?php echo $form->textField($model,'verifyCode'); ?>
			</div>
			<div class="hint">Please enter the letters as they are shown in the image above.
			<br/>Letters are not case-sensitive.</div>
			<?php echo $form->error($model,'verifyCode'); ?>
		</div>
		<?php endif; ?>
		
		that is all.

		
100- we can use Xdebug to debug and Profile our php program. read this page to realize how
	
		http://xdebug.org/docs/profiler
	
101- installing xdebug on Ubuntu is described in another file, but in win 7 and using xampp 1.7.7 we should	just add these lines to php.ini file
	

	You can install XAMPP anywhere on your system, but for this tutorial, we will use d:\xampp as the installing directory, as its easier to type.

	Install XAMPP to d:\xampp. If you want to run a web server, install the services. Its recommended if you want to test your site locally.

	WinCacheGrind

		Download WinCacheGrind and install into its default location: c:\Program Files\WinCacheGrind\

	PHP.ini

		Open d:\xampp\php\php.ini in a text editor. Find php_xdebug.dll:

		extension=php_xdebug.dll
		in the file php.ini and make sure it is commented out (has a ; at the beginning of the line). If it isn't, it will cause problems later.

	In the same file, find the line [Zend]:

		[Zend]
		
	and comment out all lines in that section with a single ; in front of each line. Xdebug cannot load if zend is operational.

	In the next section [Xdebug]:

		[Xdebug]
		
	replace the entire section with the following:

		;---------------------------------------------------
		; added by kamran
		;---------------------------------------------------
		[xDebug]
		;; Only Zend OR (!) XDebug

		zend_extension="d:\xampp\php\ext\php_xdebug.dll"

		; profile section

		xdebug.profiler_append = 0
		xdebug.profiler_enable = 1
		xdebug.profiler_enable_trigger = 0
		xdebug.profiler_output_dir = "d:\xampp\tmp"
		xdebug.profiler_output_name = "cachegrind.out.%t-%s"
		xdebug.remote_enable = 1
		xdebug.remote_handler = "dbgp"
		xdebug.remote_host = "127.0.0.1"
		xdebug.trace_output_dir = "d:\xampp\tmp"

		;debug section

		xdebug.remote_enable=on
		xdebug.remote_handler=dbgp
		xdebug.remote_mode=req
		xdebug.remote_host=192.168.2.11  ; 192.168.2.11 = win 7 ip address (netbeans 7.3 is installed on win 7 pc not Ubuntu)
		xdebug.remote_port=9000
		xdebug.remote_log="d:\php_xdebug.log"

		;-----------------------------------------------------

	The dll name changes occasionally, so if things aren't working, go to C:\xampp\php\ext\ and look for it, and copy its file name into the code above, replacing php_xdebug-2.0.0-5.2.2.dll then see if things work better.

	Tip:

	From PHP 5.3 onwards, you always need to use zend_extension and not zend_extension_ts.

	Finally, save the file php.ini and close it. and restart apache webserver
	
	-- to analyse data download WinCacheGrind from
		
		http://sourceforge.net/projects/wincachegrind/files/latest/download
		
	and use it to open the log file created by analyzer--> d:\xamp\tmp\cachegrind.out.*
	
	
	for linux use KCacheGrind or similar software ( Webgrind : php version of KCacheGrind ) introduced here:
	
		http://xdebug.org/docs/profiler
	
	IMPORTANT NOTE: Xdebug profiler creates a very big files. never leave it 'on' when you are not analyzing your code. it will consume your hard disk
					very very fast.
					
					
102- smarty is a very famouse PHP templating system but savant is easier to use and in PHP

	Savant is a powerful but lightweight object-oriented template system for PHP.

	Unlike other template systems, Savant by default does not compile your templates into PHP; instead, it uses PHP itself as its template language so you don't need to learn a new markup system.

	Why Use Savant for Templates?

	You don't need to learn a new language or markup to create a template. The template language is PHP, and the template file is a regular PHP file.
	You don't have to worry about separate directories (or permissions on those directories) for compiled template sources, because Savant is not a compiling engine (the template scripts are already written in PHP).
	Even though Savant is not itself a compiling system, you can write your own compiler and plug it into Savant; this means you can use any template markup system you like.
	The Savant source code is easy to read, understand, and extend, because it is exceptionally well-commented.
	The object-oriented plugin, filter, error, and compiler classes for Savant are easy to use, understand, and extend.
	Because your template script is a regular PHP script, you can sprinkle it with comments and use phpDocumentor to document it.


103-  INSTALL APC ON XAMPP 1.7.7

	This is how I installed APC on Xampp on Windows 7

	Go to this webpage: http://downloads.php.net/pierre/
	READ THIS BIT CAREFULLY AS THE WEBSITE ABOVE IS CONSTANTLY UPDATED. Look for a file that starts with \93php_apc\94 and then something like \93-3.1.10? (APC version) then \93-5.3? (Your Xampp PHP version) then \93-vc9? (unimportant) then \93-x86? (32 bit pc) () .zip
	At the time of writing if you were running xampp with php 5.3 then you would want this file http://downloads.php.net/pierre/php_apc-3.1.10-5.3-vc9-x86.zip
	Download and unzip this file
	Copy php_apc.dll to d:\xampp\php\ext
	Open php.ini (d:\xampp\php\php.ini) and add 
		
		extension=php_apc.dll
		apc.enabled=on 
		
	You also needed to change a couple of settings inside apache.

	Go to the directory of installation\apache\conf
	Open and edit httpd.conf in a text editor
	Find all occurrences of
	
	AllowOverride None
	
	and change to

	AllowOverride All
	
	I think it appears 2 or 3 times on the configuration file.
	Reset Apache
	Should work for you as well.

	Using APC :
	
	Using APC is simply a matter of creating your PHP script as you normally do and allowing 
	users to request the script. The initial request to the script will prime the cache, meaning 
	that when the initial request for the script is done or a change to the original PHP script 
	has been made, the Zend engine will create the Opcode in the background and store the 
	generated Opcode within shared memory using APC. APC works in the background of 
	your code and contains no special functions to cache the generated Opcode 
	
	benefits of using APC within our application. The code shown in Listing 4\965 creates an 
	array with 10,000 elements and then displays the data on the screen.  
	Listing 4\965. Sample Code to Test Using ab 
	<?php 
	$max = 10000; 
	$x = 0; 
	$array = array(); 
	while($x < $max) 
	{ 
	 
			$array[x] = $x; 
			$x++; 
	} 
	 
	 
	foreach($array as $z) 
	{ 
	   echo "$z<br/>"; 
	} 

	We need to check on the improvement APC adds when applied to our PHP script. By 
	taking two tests\97the initial test to simulate the speed of our application while APC is 
	turned off and a secondary test to determine the change in performance while APC is 
	turned on\97we can accomplish this. We will test this by simulating 1,000 requests with 5 
	concurrent requests using ab, as shown in below

	ab -n 1000 -c 5 http://kamran.dev.travelagancy.com:81/k1.php
	
	Installing the Admin tool for APC
	
	To install the web interface, each APC installation includes an apc.php file. The file is the
	only item that is required to run the web interface and must simply be installed within the
	web server to access it.  
	If you installed APC from source or if you\92re on a Windows machine, you will need to
	download the installation package

104- apache benchmark that is available in apache package can be used to benchmark a single page for example in xampp
	go to d:\xampp\apache\bin folder and run

		ab -n 100 http://kamran.dev.travelagancy.com:81/
	
	this command sends 100 request to the requested URL and after few MINUTS shows the results. in the results page
	two items are very importane: Requests per second, and Time per request.
	
		ab -n 100 -c 10 http://kamran.dev.travelagancy.com:81/
	
	sends 10 request in each time 10 cuncurent requests
	
	These fields give us a glimpse into the amount of data the web server has sent back 
 	for a single request, the total number of requests the web server can handle in a single 
	second, and the total elapsed time in which a single request successfully requested data 
	and received a response from the web server. 
	Our goal is to successfully lower the HTML transferred, increase the Requests per 
	second, and lower the Time per request values

105- Firebug has tools for javascript and CSS profiling.

106- By putting all of javascripts on the end of page, page loading will seems very faster for end user.

107-  Minification Tools 
	We introduce two JavaScript minification tools, YUI Compressor by Yahoo! and Closure 
	Compiler by Google. Using both tools, we will compress the JQuery JavaScript framework. of course the min version of jQuery is
	avalable in their website too
	
108- File compression is another method of reducing the size of JavaScript as well as CSS files. 
	 Using compression on an already minified JavaScript or CSS file can reduce the size even 
	 further. The most widely used compression to date is GZip.
	
109- Smush.it 
	Smush.it is a lossless compression tool created by Yahoo! to reduce the file size of your 
	images even further. The tool is available at www.smushit.com and allows you to either 
	upload your files or reference them using a list of URLs (Figure 2\9615). There is a file size 
	restriction of 1MB. 
	
111- decreasing the number of call to javascript files can reduce the load time of a page too. to do that merge all of your
	 *.js files to one or two js file.
	 
112- 	APC variable Caching 

		In previous notes, we implemented APC to exclusively cache PHP Opcode. In this section, we 
		will use APC to store information. To do so, we\92re going to focus on a subset of internal 
		PHP APC methods shown below. Before we begin, make sure you have the APC 
		PHP extension fully installed. 
		
			apc_add()  		apc_add(String key, Mixed var, int Expiration Time)  	Adds content into cache using specific key if key does not 	already exist. 
			apc_fetch()     apc_fetch(Mixed key)    Fetches content of a specific key within cache. Returns false if key not found. 
			acp_store()     apc_store(String key, Mixed var, int Expiration Time)   Stores a value in cache using a specific key. Will replace 
																					value if key exists
			apc_exists()    apc_exists(mixed keys)  Checks if the key is present in cache. Returns true if key 
													exists, false otherwise
			apc_delete()    apc_delete(String key)	Removes a specific key from cache. Returns true if
													successful, false otherwise
													
		The functions outlined above allow us to add data into shared memory, fetch 
		data from shared memory using a specific key, check to determine if the key is present, 
		and finally remove content from cache that is associated to a specific key. 
		
		example: a hit counter using APC functions
		
			<?php 
			/** 
			 * Example visitor counter using APC. 
			 * 
			 **/ 
			if(!$counter = apc_fetch('myCounter')) 
			{ 
			   $counter = 1; 
			   //Add the new value to memcached 
			   apc_add('myCounter', $counter, 120); 
			 
			} 
			else 
			{ 
			 
			   $counter++; 
			 
			   //Update the counter in cache 
			   apc_store('myCounter', $counter, 120); 
			 
			} 
 
			echo "Your visitor number: ".$counter; 

											
113- Saving files to a blob field in the database
	
		http://sudwebdesign.com/yii-uploading-and-saving-images/541
		
		and

		http://www.yiiframework.com/wiki/95/saving-files-to-a-blob-field-in-the-database/
		
		as we can see it is very similar to uploading image and saving in a folder
		but just controler is different and data type in table should be BLOB
		
		the controler should be like:
		
\A0
		public function actionCreate()
			{
				$model=new Photos;
		\A0
				if(isset($_POST['Photos']))
				{
							$model->attributes=$_POST['Photos'];
							$myfile = CUploadedFile::getInstance($model,'image');
							$model->image=$myfile;
		\A0
							if($model->save())
								$this->updatePhoto($model, $myfile);
		\A0
							$this->redirect('view'.'id'=>$model->id);
				}
		\A0
				$this->render('create',array(
					'model'=>$model,
				));
			}
		\A0
			/*------------------------------------------------
	\A0       * Upload and crunch an image
	\A0       ------------------------------------------------*/
			public function updatePhoto($model, $myfile ) {
			   if (is_object($myfile) && get_class($myfile)==='CUploadedFile') {
					$ext = $model->image->getExtensionName();
	\A0
			//generate a filename for the uploaded image based on a random number
			// but check that the random number has not already been used
					if ($model->filename=='' or is_null($model->filename)) {
						$n=1;
						// loop until random is unqiue - which it probably is first time!
						while ($n>0) {
							$rnd=dechex(rand()%999999999);
							$filename=$model->property->ref . '_' . $rnd . '.' . $ext;
							$n=Photos::model()->count('filename=:filename',array('filename'=>$filename));
						}
					$model->filename=$filename;
					}
	\A0
					$model->save();
	\A0
					$model->image->saveAs($model->getPath());  //model->getPath see below
	\A0
					$image = Yii::app()->image->load($model->getPath());
			//Crunch the photo to a size set in my System Options Table
			//I hold the max size as 800 meaning to fit in an 800px x 800px square
					$size=$this->getOption('PhotoLarge');
					$image->resize($size[0], $size[0])->quality(75)->sharpen(20);
					$image->save(); 
	\A0
			// Now create a thumb - again the thumb size is held in System Options Table
			$size=$this->getOption('PhotoThumb');
					$image->resize($size[0], $size[0])->quality(75)->sharpen(20);
					$image->save($model->getThumb()); // or $image->save('images/small.jpg');
					return true;
				 } else return false;
			}

			
			-- model should have these lines too
			
			public function getThumbnail(){
				 // here i return the image
					if (!empty($this->filename) && $this->filename!='')
					 return CHtml::image($this->getURL(),$this->alt_text,array('width'=>options::model()->getOption('PhotoThumb').'px','max-height'=>options::model()->getOption('PhotoThumb').'px'
				 ));
			}
			public function getPath($all=true){
				if (is_null($this->_PhotoPath)) {
					 // I hold the image path and system directory separator in the config/main.php
					 // this is because I develop on a windows server and normally deploy on Linux
					 $this->_PhotoPath=Yii::app()->params['imagePATH'];
					 $this->_PathSep=Yii::app()->params['pathSep'];
				}
				$path=$this->_PhotoPath.$this->_PathSep;
				if ($all) $path.=$this->filename;
				return $path;
			}

		
		
114- to learn about REST

		http://rest.elkstein.org/
		
	REST is an architecture style for designing networked applications. The idea is that, rather than using complex mechanisms such as CORBA, RPC or SOAP to connect between machines, simple HTTP is used to make calls between machines.
	
	RESTful applications use HTTP requests to post data (create and/or update), read data (e.g., make queries), and delete data. Thus, REST uses HTTP for all four CRUD (Create/Read/Update/Delete) operations.

	REST is a lightweight alternative to mechanisms like RPC (Remote Procedure Calls) and Web Services (SOAP, WSDL, et al.).

	Much like Web Services, a REST service is:

		Platform-independent (you don't care if the server is Unix, the client is a Mac, or anything else),
		Language-independent (C# can talk to Java, etc.),
		Standards-based (runs on top of HTTP), and
		Can easily be used in the presence of firewalls.
	
	Like Web Services, REST offers no built-in security features, encryption, session management, QoS guarantees, etc. But also as with Web Services, these can be added by building on top of HTTP:

		For security, username/password tokens are often used.
		For encryption, REST can be used on top of HTTPS (secure sockets).
		... etc.
		One thing that is not part of a good REST design is cookies: The "ST" in "REST" stands for "State Transfer", and indeed, in a good REST design operations are self-contained, and each request carries with it (transfers) all the information (state) that the server needs in order to complete it.

		In REST the request that a machine sends to other is like:
		
			http://www.acme.com/phonebook/UserDetails?firstName=John&lastName=Doe
		
		and response will be an XML, JSON, CSV or ... file.
		
		Here's a simple example: the following URL sends a REST request to Twitter's search service: http://search.twitter.com/search.atom?q=elkstein&count=5. This specific search request searches for the string "elkstein", as set by the q parameter (vanity searches are always fun); and limits the response to at most 5 results, using the count parameter. There are, of course, many additional parameters, as documented on Twitter's developer pages.
		
115- REST and AJAX
		AJAX is a popular web development technique that makes web pages interactive using JavaScript.

		In AJAX, requests are sent to the server using XMLHttpRequest objects. The response is used by the JavaScript code to dynamically change the current page.

		In many ways, AJAX applications follow the REST design principles. Each XMLHttpRequest can be viewed as a REST service request, sent using GET. And the response is often in JSON, a popular response format for REST.
		
		
	
116- USING REST in PHP

	Modern versions of PHP make it trivial to GET web pages: any file-access function (even include!) works seamlessly with URLs, too. Thus, you can use fopen, file_get_contents, and any other file-reading function to issue GET requests. For example:

		$url = "http://www.acme.com/products/3322";
		$response = file_get_contents($url);
		echo $response;
		
	Any parameters passed to GET requests must be encoded (e.g., a space is %20); you can encode strings using the "urlencode" function.

	Issuing POST Requests
	In stark contrast to the ease of doing a GET, there's no simple way to do a POST in PHP. You have to open a connection to the server and manually send all HTTP headers. Here's a simple function that will do the trick, for any HTTP method:

	function httpRequest($host, $port, $method, $path, $params) {
	  // Params are a map from names to values
	  $paramStr = "";
	  foreach ($params as $name, $val) {
		$paramStr .= $name . "=";
		$paramStr .= urlencode($val);
		$paramStr .= "&";
	  }

	  // Assign defaults to $method and $port, if needed
	  if (empty($method)) {
		$method = 'GET';
	  }
	  $method = strtoupper($method);
	  if (empty($port)) {
		$port = 80; // Default HTTP port
	  }

	  // Create the connection
	  $sock = fsockopen($host, $port);
	  if ($method == "GET") {
		$path .= "?" . $paramStr;
	  }
	  fputs($sock, "$method $path HTTP/1.1\r\n");
	  fputs($sock, "Host: $host\r\n");
	  fputs($sock, "Content-type: " .
				   "application/x-www-form-urlencoded\r\n");
	  if ($method == "POST") {
		fputs($sock, "Content-length: " . 
					 strlen($paramStr) . "\r\n");
	  }
	  fputs($sock, "Connection: close\r\n\r\n");
	  if ($method == "POST") {
		fputs($sock, $paramStr);
	  }

	  // Buffer the result
	  $result = "";
	  while (!feof($sock)) {
		$result .= fgets($sock,1024);
	  }

	  fclose($sock);
	  return $result;
	}
	Issuing a POST request using this function is as simple as:

	$resp = httpRequest("www.acme.com",
		80, "POST", "/userDetails",
		array("firstName" => "John", "lastName" => "Doe"));
	One alternative to this approach is using PHP's CURL support; however, I'm not sure if it's really easier.

117- REST implementation in Yii
	
		http://www.yiiframework.com/wiki/175/how-to-create-a-rest-api/

118- if we are going to add a validation error or any type of error to model class, "inside" controller we can write:
	
		$this->addError($attribute,'Phone number should be in correct formats');

119- to create a link like   <a href='index.php?r=controller/action'>Link Text</a>

	we should use CHtml class in this way:
		
		<?php echo CHtml::link('Link Text',array('controller/action')); ?>
	
	or even better
	
		<?php echo CHtml::Link('Link Text',$this->createUrl('controller/action')); ?>
	
	in the second method we have used the createUrl() function of Controller class to create the URL of the page.
	
120- Xdebug + Netbeans 7.2.1 is NOT as strong as PhpED + its built in debugger and cannot show all properties of PHP objects. 
	so PhpEd is recommneded for serious	programming tasks. but for source formatting and beatifuller we can use Netbeans.
	It is better than eclipse's beautifuller and any other source beatifuller when you customize netbeans options.
	
	
121-	render():
			is commonly used to render a view that corresponds to what a user sees as a "page" in your application. It first renders the view you have specified and then renders the layout for the current controller action (if applicable), placing the result of the first render into the layout. It then performs output processing (which at this time means automatically inserting any necessary <script> tags and updating dynamic content) and finally outputs the result.

		renderPartial():
			is commonly used to render a "piece" of a page. The main difference from render() is that this method does not place the results of the render in a layout. By default it also does not perform output processing, but you can override this behavior using the $processOutput parameter.

		renderFile() :
			is a low-level method that does the grunt work of rendering: it extracts the data variables in the current scope and then runs the view code. The other two methods internally call this one, but you should practically never need to call it yourself. If you do, keep in mind that you need to pass in a file path (not a view path).

122- when we have a combination of HTML and php like
		
		<div id="footer">
			Copyright &copy; <?php echo date('Y'); ?> by Kamran Khoshnasib.<br/>
			All Rights Reserved.<br/>
			<?php echo Yii::powered(); ?>
		</div><!-- footer -->
	
		and we are going to comment all of it , we should put all on 
		
			<?php /*
			
			
			*/ ?>
			
123- In the themes, if the footer goes to write side of screen, we should add

			<div class="clear"></div> 
		
		before
		
			<div id="footer">
			
		at the views/layouts/main.php file.
		
	
124- An example of using criteria in Yii

		$criteria = new CDbCriteria;

        $criteria->compare('Id', $this->Id);
        $criteria->compare('Name', $this->Name, true);
        $criteria->compare('Family', $this->Family, true);
        
        
        // kamran
		$criteria->select = "Id, Name, Family";
        $criteria->condition = "Name > '' ";
        
        return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));


125- Normally a textField (input tag) is like this in YiiBooster of zii

		echo $form->textFieldRow($model,'username',array('class'=>'span5','maxlength'=>256)); 	
		
	to add some htmlOptions to it we should change it like below: (e.g. to make it readonly)
	
		echo $form->textFieldRow($model,'username',array('class'=>'span5','maxlength'=>256, 'readonly' => 'readonly')); 
	
	be careful that textField has 3 parameters and the third one is htmlOptions. but Dropdown has 4 and the forth is HtmlOptions.
		
126- to add HtmlOptions in Form widget

		<?php $form=$this->beginWidget('CActiveForm', array(
			'id'=>'clm-dtl-claims-form',
			'enableAjaxValidation'=>false,
			'htmlOptions'=>array('enctype' => 'multipart/form-data')
			));
		?>

	and YiiBooster forms
	
		<?php $form=$this->beginWidget('bootstrap.widgets.TbActiveForm',array(
			'id'=>'client-form',
			'enableClientValidation' => true,
			'enableAjaxValidation' => false,
			'clientOptions' => array(
				'validateOnSubmit' => true,
			),
			// for image upload, we need these lines
			'htmlOptions' => array(
				'enctype' => 'multipart/form-data',
			),
		)); ?>
	
	
127-    the meaning of some constants in PHP

		__LINE__	 The current line number of the file.
		
		__FILE__	 The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, __FILE__ always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances.
		
		__DIR__	     The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(__FILE__). This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)
		
		__FUNCTION__  The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.
		
		__CLASS__	The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased. The class name includes the namespace it was declared in (e.g. Foo\Bar). Note that as of PHP 5.4 __CLASS__ works also in traits. When used in a trait method, __CLASS__ is the name of the class the trait is used in.
		
		__TRAIT__	The trait name. (Added in PHP 5.4.0) As of PHP 5.4 this constant returns the trait as it was declared (case-sensitive). The trait name includes the namespace it was declared in (e.g. Foo\Bar).
		
		__METHOD__	The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive).

		__NAMESPACE__	The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0). 


128- to change the CSS of screen we should change the protected/views/layouts/column1.php, protected/views/layouts/column2.php,
		protected/views/layouts/main.php and simliar files in the Themes/Theme_name/views/layouts/  folders.
		the CSS' could be found in protected/CSS/Screen.css and protected/CSS/main.css
		
		for example to increase the width of page change
		
			.container {width:950px;margin:0 auto;} 

		in screen.css file and to increase the left panel in 2 column layout change
		
			.span-23 {width:910px;}
			
		and in addition change this line on column2.php
		
			<div class="span-19">
		to
			<div class="span-23">
			
		IMPORTANT NOTE: the best way is using FIREBUG to find which css are used by the program and then change it for example 
					just changing .container {width:950px;margin:0 auto;}  does not increase the width of main screen . Using Firebug we
					realize that .container{} in /protected/extensions/bootstrap/assests/css/bootstrapo-reposive.css  in responsible for that
					and we should change .container{} on that css not .container{} on the screen.css
					

129- How to generate Yii-like Documentation
	
		http://www.yiiframework.com/wiki/186/how-to-generate-yii-like-documentation/
		
130- to change size of netbeans' menu and panels' font we should Tools > Option > Fonts and colors > Syntax > Font. 

		or
		
		open g:\NetBeans 7.2.1\etc\netbeans.conf file and add a --fontsize XX parameter to 
		netbeans_default_options (where XX is the numeric pixel size of the font). 
		
		
131-  to right align a div, create a css class like

		.KRight
		{
			position:absolute;
			right:100px;
			width:200px;

		}
		and for left align
		
		.KLeft
		{
			/* position:absolute; */
			left:100px;
			width:200px;

		}
		
		good links:
		
		http://www.intensivstation.ch/en/templates/
		
		http://www.intensivstation.ch/files/en_templates/temp03.html
		
	
	then add it to you div block:
	
		<div id="sidebar" class="right">
			<?php
			$this->beginWidget('zii.widgets.CPortlet', array(
				'title' => 'Operations',
			));
			$this->widget('zii.widgets.CMenu', array(
				'items' => $this->menu,
				'htmlOptions' => array('class' => 'operations'),
			));
			$this->endWidget();
			?>
		</div><!-- sidebar -->
	
132- a small help about HTmlOptions

		http://www.yiiframework.com/wiki/143/htmloptions-explained-for-various-controls/

133- my method to implement 3 depended combo boxes( 3 cascade depended combo box with ajax call to contollers)

	a) I added these actions to controller class(RoomClientController.php)
		
		//-----------------------------------------------------
		    // Kamran
			public function actionDynamicCities()
			{
				$countryId = (int) $_POST['country_id'];
				$cities = RoomClient::getDynamicCities($countryId);

				// add one blank line
				echo CHtml::tag('option', array('value' => 0), CHtml::encode('Please select...'), true);
				foreach ($cities as $value => $name)
				{
					echo CHtml::tag('option', array('value' => $value), CHtml::encode($name), true);
				}
			}

			public function actionDynamicHotels()
			{
				$cityId = (int) $_POST['city_id'];
				$hotels = RoomClient::getDynamicHotels($cityId);

				// add one blank line
				echo CHtml::tag('option', array('value' => 0), CHtml::encode('Please select...'), true);
				foreach ($hotels as $value => $name)
				{
					echo CHtml::tag('option', array('value' => $value), CHtml::encode($name), true);
				}
			}

			public function actionDynamicRooms()
			{
				$hotelId = (int) $_POST['hotel_id'];
				$rooms = RoomClient::getDynamicRooms($hotelId);

				// add one blank line
				echo CHtml::tag('option', array('value' => 0), CHtml::encode('Please select...'), true);
				foreach ($rooms as $value => $name)
				{
					echo CHtml::tag('option', array('value' => $value), CHtml::encode($name), true);
				}
			}

			public function checkAvailabilityOfRoom(
			$roomId, $startDate, $endDate, $roomClientId, &$result)
			{
				$res = true;
				$result = '';

				if ($startDate > $endDate)
				{
					// add flash message error to start date field and end date field
					$model->addError('StartDate', 'Start date should not be greater than end date.');
					$model->addError('EndDate', 'Start date should not be greater than end date.');

					$result[] = 'Error in dates.';

					return false;
				}

				if ($roomClientId !== NULL)
				{
					// process update request
					// VERY Important note:
					// In the update mode we should excluse the current
					// reservation of room from search results (VERY IMPORTANT)

					$roomClients = RoomClient::model()->findAll('RoomId = :roomId AND Id <> :roomClientId', array(':roomId' => $roomId, ':roomClientId' => $roomClientId));
				}
				else
				{
					// process create a new reservation process
					$roomClients = RoomClient::model()->findAll('RoomId = :roomId', array(':roomId' => $roomId));
				}



				foreach ($roomClients as $key => $value)
				{
					$start = $roomClients[$key]->StartDate;
					$end = $roomClients[$key]->EndDate;
					$status = $roomClients[$key]->Status;

					if ((($startDate >= $start) && ($startDate <= $end))
							|| (($endDate >= $start) && ($endDate <= $end))
							|| (($start >= $startDate) && ($start <= $endDate))
							|| (($end >= $startDate) && ($end <= $endDate))
					)
					{

						$clientId = $roomClients[$key]->ClientId;
						$clientFullName = ClientFullnameView::model()->
										findByPk($clientId)->FullName;

						$result .= '--- This room is taken by ' . $clientFullName . '. The room status = ' .
								$status . ', Check in date = ' . $start . ', Check out date = ' . $end;

						$res = false;
					}
				}

				if ($res == true)
				{
					$result = 'This room is available between ' . $startDate . ' and ' . $endDate . '.';
					return true;
				}
				else
				{
					return false;
				}
			}

			public function actionCheck($isAjaxCall = true, $roomClientId = NULL)
			{
				// First check all of the fields should be selected by the user
				if (!empty($_POST['room_id']))
					$roomId = (int) $_POST['room_id'];
				else
				{
					echo 'some of input are missed. select all of the fields on screen';
					return false;
				}

				if (!empty($_POST['RoomClient']['StartDate']))
					$start = $_POST['RoomClient']['StartDate'];
				else
				{
					echo 'some of input are missed. select all of the fields on screen';
					return false;
				}

				if (!empty($_POST['RoomClient']['EndDate']))
					$end = $_POST['RoomClient']['EndDate'];
				else
				{
					echo 'some of input are missed. select all of the fields on screen';
					return false;
				}

				if (empty($roomClientId) && !empty($_POST['roomClientId']))
					$roomClientId = $_POST['roomClientId'];

				$result = '';

				// Second: send information for getting availability of the room
				$res = $this->checkAvailabilityOfRoom($roomId, $start, $end, $roomClientId, $result);

				// to send the $result to jQuery ajax caller, we should use 'echo' function
				if ($isAjaxCall)
				{
					echo $result;
				}

				return $res;
			}

		//-----------------------------------------------------
		
		b) add this functions to the model class (RoomClient.php)
		
		//-----------------------------------------------------
		// Kamran
			public function getStatus()
			{
				return array(
					'Reserved' => 'Reserved',
					'Reservation Request' => 'Reservation Request',
					'Cancelation Request' => 'Cancelation Request',
				);
			}
			
			/**
			 * Create list of countries and their id and return as a list
			 * This will be used easily in a comboBox or listbox on the view files
			 * By Kmaran
			 */
			public function getCountries()
			{
				// get list of countries
				$countries = Country::model()->findAll();
				
				// convert them to suitable format for comboBox or listbox
				$countriesArray = CHtml::listData($countries, 'Id', 'Name');
				
				//add one blank line on the first of array
				array_unshift($countriesArray, 'Please select...');
				
				return $countriesArray;
			}

			public function getClientsFullName()
			{
				// get list of ClientFullnameView
				$clients = ClientFullnameView::model()->findAll();
				
				// convert them to suitable format for comboBox or listbox
				$clientsArray = CHtml::listData($clients, 'ClientId', 'FullName');
				
				//add one blank line on the first of array
				//array_unshift($clientsArray, 'Please select...');
				return $clientsArray;
			}
			
			public static function getDynamicCities($countryId)
			{
				$data = City::model()->findAll('CountryId = :country_id', array(':country_id' => $countryId)); 
				$cities = CHtml::listData($data, 'Id', 'Name');
				return  $cities;
			}
			
			public static function getDynamicHotels($cityId)
			{
				$data = Hotel::model()->findAll('CityId = :cityId', array(':cityId' => $cityId));
				$hotels = CHtml::listData($data, 'ID', 'Name');
				return  $hotels;
			}
			
			public static function getDynamicRooms($hotelId)
			{
				$data = Room::model()->findAll('HotelId = :hotelId', array(':hotelId' => $hotelId));
				$rooms = CHtml::listData($data, 'Id', 'RoomNumber');
				return  $rooms;
			}    
			//-----------------------------------------------------			
		
		c) view file(_form.php) is like this
		
			//-----------------------------------------------------
			<?php
				$form = $this->beginWidget('bootstrap.widgets.TbActiveForm', array(
					'id' => 'room-client-form',
					'enableClientValidation' => true,
					'enableAjaxValidation' => false,
					'clientOptions' => array(
						'validateOnSubmit' => true,
					),
					'htmlOptions' => array(
						/* 'onsubmit'=>"return false;",  */ /* Disable normal form submit */
						'onkeypress' => " if(event.keyCode == 13){ sendAjaxRequest(); } " /* Do ajax call when user presses enter key */
					),
						));
				?>

				<?php echo $form->errorSummary($model); ?>
				<div class="span5">

					<?php echo $form->dropDownListRow($model, 'ClientId', $model->getClientsFullName(), array('class' => 'span5')); ?>

					Country Name:<br>
					<?php
					echo CHtml::dropDownList('country_id', '', $model->getCountries(), array(
						'class' => 'span5',
						'ajax' => array(
							'type' => 'POST', //request type
							'url' => CController::createUrl('roomClient/dynamicCities'), //url to call.
							//Style: CController::createUrl('currentController/methodToCall')
							'update' => '#city_id', //selector to update
						//'data'=>'js:javascript statement'
						//leave out the data key to pass all form values through
							)));
					?>
				</div>
				<div class="span5">
					City Name:<br>
					<?php
					//empty since it will be filled by the other dropdown
					echo CHtml::dropDownList('city_id', '', array(), array(
						'class' => 'span5',
						'ajax' => array(
							'type' => 'POST',
							'url' => CController::createUrl('roomClient/dynamicHotels'),
							'update' => "#hotel_id"
						//'data'=>'js:javascript statement'
						//leave out the data key to pass all form values through
							)));
					?>
				</div>
				<div class="span5">
					Hotel Name:<br>
					<?php
				//empty since it will be filled by the other dropdown
					echo CHtml::dropDownList('hotel_id', '', array(), array(
						'class' => 'span5',
						'ajax' => array(
							'type' => 'POST',
							'url' => CController::createUrl('roomClient/dynamicRooms'),
							'update' => "#room_id"
						//'data'=>'js:javascript statement'
						//leave out the data key to pass all form values through
							)));
					?>
				</div>
				<div class="span5">
					Room Number:<br>
					<?php
					//empty since it will be filled by the other dropdown
					echo CHtml::dropDownList('room_id', '', array(), array('class' => 'span5'));
					?>
				</div>
				<div class="span5">

					<?php echo $form->datepickerRow($model, 'StartDate', array('options' => array('format' => 'yyyy-mm-dd'), 'id' => 'start_date', 'prepend' => '<i class="icon-calendar"></i>')); ?>

					<?php echo $form->datepickerRow($model, 'EndDate', array('options' => array('format' => 'yyyy-mm-dd'), 'id' => 'end_date', 'prepend' => '<i class="icon-calendar"></i>')); ?>
					<br>

					<?php echo CHtml::Button('Check availability of room', array('onclick' => 'sendAjaxRequest();')); ?>

					<br><br>
					<div id="room_availability" style="color:green"></div>
					<br><br>

					<!-- a hidden field -->
					<?php echo CHtml::hiddenField('roomClientId', '', array()); ?>

					<?php echo $form->dropDownListRow($model, 'Status', $model->getStatus(), array('class' => 'span5')); ?>

					<div class="form-actions">
						<?php
						$this->widget('bootstrap.widgets.TbButton', array(
							'buttonType' => 'submit',
							'type' => 'primary',
							'id' => 'save_update',
							'label' => $model->isNewRecord ? 'Create' : 'Save',
						));
						?>
					</div>

				</div>
				<div class="span5">
					<?php
					foreach (Yii::app()->user->getFlashes() as $key => $message)
					{
						echo '<div class="flash-' . $key . '">' . $message . "</div>\n";
					}
					?>
				</div>
				<?php $this->endWidget(); ?>
				<script>
					// jQuery function to change the caption of key after click
					$('#save_update').click(function() {
						startDate = $('#start_date').val();
						endDate = $('#end_date').val();
						if (startDate > endDate)
						{
							alert('Check in date should be smaller than or equal to Check out date.');
							return;
						}
						//$('#save_update').html('Saving, Please wait....');
					});


					function sendAjaxRequest()
					{
						$('#room_availability').text('Checking, Please wait ...');

						var updateMode = '<?php echo $updateMode ?>' ;
						// alert('updateMode is : '+ updateMode);

						var roomClientId = '<?php echo $model->Id ?>';
						//alert('roomClientId is : ' + roomClientId);

						$('#roomClientId').val(roomClientId);

						var data=$('#room-client-form').serialize();

						urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('roomClient/check'); ?>'

						//alert(urlAjax);

						$.ajax({
							type: 'POST',
							url: urlAjax,
							data: data,
							success: function(data) {
								//alert('success');
								//alert(data);
								// change the text on the screen with id = room_availability
								$('#room_availability').text(data);
							},
							error: function(data) { // if error occured
								alert('Error occured. please try again');
								//alert(data);
							},

							dataType:'html',
							timeout:60000
						});

					}
				</script>
			
			
			
134- a sample of creating complex fields in mysql using concat() function

	SELECT clients.Id as ClientId
		 , concat(clients.Name , ' ' ,  clients.Family , ', username = ' ,  users.username) as FullName
	FROM
	  clients
	INNER JOIN users
	ON clients.UserId = users.id


135-  very good example of using Ajax and Php and my sql

		http://www.w3schools.com/php/php_ajax_database.asp
		
	
		-- HTML file
		
			
			<html>
			<head>
			<script>
			function showUser(str)
			{
			if (str=="")
			  {
			  document.getElementById("txtHint").innerHTML="";
			  return;
			  } 
			if (window.XMLHttpRequest)
			  {// code for IE7+, Firefox, Chrome, Opera, Safari
			  xmlhttp=new XMLHttpRequest();
			  }
			else
			  {// code for IE6, IE5
			  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
			  }
			xmlhttp.onreadystatechange=function()
			  {
			  if (xmlhttp.readyState==4 && xmlhttp.status==200)
				{
				document.getElementById("txtHint").innerHTML=xmlhttp.responseText;
				}
			  }
			xmlhttp.open("GET","getuser.php?q="+str,true);
			xmlhttp.send();
			}
			</script>
			</head>
			<body>

			<form>
			<select name="users" onchange="showUser(this.value)">
			<option value="">Select a person:</option>
			<option value="1">Peter Griffin</option>
			<option value="2">Lois Griffin</option>
			<option value="3">Glenn Quagmire</option>
			<option value="4">Joseph Swanson</option>
			</select>
			</form>
			<br>
			<div id="txtHint"><b>Person info will be listed here.</b></div>

			</body>
			</html>
			
			
		-- PHP file
		
			<?php
			$q=$_GET["q"];

			$con = mysql_connect('localhost', 'peter', 'abc123');
			if (!$con)
			  {
			  die('Could not connect: ' . mysql_error());
			  }

			mysql_select_db("ajax_demo", $con);

			$sql="SELECT * FROM user WHERE id = '".$q."'";

			$result = mysql_query($sql);

			echo "<table border='1'>
			<tr>
			<th>Firstname</th>
			<th>Lastname</th>
			<th>Age</th>
			<th>Hometown</th>
			<th>Job</th>
			</tr>";

			while($row = mysql_fetch_array($result))
			  {
			  echo "<tr>";
			  echo "<td>" . $row['FirstName'] . "</td>";
			  echo "<td>" . $row['LastName'] . "</td>";
			  echo "<td>" . $row['Age'] . "</td>";
			  echo "<td>" . $row['Hometown'] . "</td>";
			  echo "<td>" . $row['Job'] . "</td>";
			  echo "</tr>";
			  }
			echo "</table>";

			mysql_close($con);
			?>
		

136- correct format for PHP dates that is compatible with MySQL is
	
		$today = date("Y-m-d H:i:s");   // 2001-03-10 17:16:18 (the MySQL DATETIME format)
		
		or
		
		$s = '06/Oct/2011:19:00:02';
		$date1 = strtotime($s);
		$date2 = date('d/M/Y:H:i:s', $date1);
		
137- if we are going to add some information to a div tag using jQuery and we like to just add simple text we can use
		
		$('#room_availability').text(data); 
		
	but if we are going to add HTML tags too we should use
	
		$('#room_availability').append(data); 
		

138- Different SQL JOINs

	Before we continue with examples ( http://www.w3schools.com/sql/sql_join.asp ),
	we will list the types of JOIN you can use, and the differences between them.

	JOIN: Return rows when there is at least one match in both tables
	LEFT JOIN: Return all rows from the left table, even if there are no matches in the right table
	RIGHT JOIN: Return all rows from the right table, even if there are no matches in the left table
	FULL JOIN: Return rows when there is a match in one of the tables
	
139 - netbeans from version 7.3 have breakpoint in javascript code, even 7.2.1 cannot do that. but xdebug should be enabled on it too


140- some good examples for REST full with jquery and PHP (VERY GOOD EXAMPLES)

			http://coenraets.org/blog/2011/12/restful-services-with-jquery-php-and-the-slim-framework/
			
			and
			
			http://www.9lessons.info/2012/05/create-restful-services-api-in-php.html
			
			and
			
			http://blog.garethj.com/2009/02/17/building-a-restful-web-application-with-php/
			
141- MySQL DB backup

	Database backups can be made in two ways: by copying the data directory directly (either
	manually or by means of the mysqlhotcopy script on Unix) or by using the mysqldump tool to
	write out a SQL file that will replicate your database. The former is a little faster, but the latter
	is more flexible. With mysqldump you can choose to copy just the structure of the database,
	just the data, or both.
	The most basic usage of mysqldump is:
	mysqldump -u username -p databasename > dumpfilename.sql
	This command will dump a text file that can be read into another database server, like this:
	mysql -u root -p databasename < dumpfilename.sql
	Instead of directing the output of mysqldump to a file, you can also pipe it directly to another
	server, like so:
	mysqldump -u username -p databasename |
	mysql -h remote-host -u remoteuser -p -C databasename
	

142-  MySQl replication

	In a nutshell, the operations that must be performed to establish MySQL replication are these:
	1. Grant permissions to slave user on master.
	2. Take snapshot of master data; copy to slave machines.
	3. Shut down MySQL servers.
	4. Restart MySQL servers with correct server-ids.
	5. Establish master-slave relationship from each slave.
	Now we\92ll explain the process in more detail.
	You will need to create an account on the master database for slaves to use, with the 
	REPLICATE SLAVE privilege. You do not need to grant any other privileges to this account.
	GRANT REPLICATE SLAVE ON *.*
	TO replicant@\92%\92 IDENTIFIED BY \91replpwd\92;
	Next, lock the master server and take a snapshot of its state immediately before the replica-
	tion. On the master server, log in to a MySQL client session as the root user and issue the
	commands:
	FLUSH TABLES WITH READ LOCK;
	SHOW MASTER STATUS;
	This will prevent any changes from being made to the database until you are ready to bring
	up the cluster. You may also (depending on whether this server has been run with binary 
	logging) see some data about the location of the binary log file and offset. If so, write it down;
	if not, use the default values \91\92 (empty string) and 4, respectively.
	Next, copy the master database structure and data. There are two ways to do this. The first 
	is to simply copy the mysql/data directory into a tarball or zip file by using one of these
	commands or a GUI procedure:
	tar -cvf master_snapshot.tar data/
	zip master_snapshot.zip data/
	Alternatively, you can use mysqldumpto make a backup as described in the next section. Copy
	this snapshot file to each slave server.
	Now shut down all the master and slave servers. Quit out of any mysql client shell sessions,
	and issue the command:
	mysqladmin -u root -p shutdown
	on each server. The reason you are shutting the servers down is to give them unique server-
	id values. They will use these values to find each other when they establish the master-slave
	relationship. This value is set in each server\92s my.cnf file and will be read in on startup. On
	Windows, the my.cnf file is located in one of two places: C:\my.cnf or C:\[Windows
	directory]\my.ini. On Unix systems, the global my.cnf file is found in /etc/my.cnf and
	the server-specific file (which is probably the one you want to use) is found in /path/to/
	mysql/data/my.cnf.
	First, set the server-id on the master machine. Find or create a file called my.cnf in the
	proper location for your platform, and make sure it contains the lines:
	[mysqld]
	log-bin
	server-id=1276 Part II ?  PHP and MySQL
	Restart the master server:
	bin/mysqld_safe --user=mysql
	In each slave server\92s my.cnf files, you need only the server-id, not the log-bin line. The
	most important thing is that you are absolutely positive that all the server-id values in your
	cluster are unique! If they are not, bad things will happen. So the first slave\92s my.cnf file
	would contain this line:
	[mysqld]
	server-id=2
	The second slave would set server-id=3, and so forth.
	Now, before you bring up each slave server, you may need to do a little bit of housekeeping. 
	If this MySQL server has been used as a slave before, you may want to delete the files data/
	master.info and data/relay-log.info. You may also want to delete the .err and .pid
	files in the data directory. Also, if you copied the master\92s data snapshot into a tarball or 
	zipfile, now is the time to copy it to the slave with a command like one of these (from the
	mysql directory):
	tar -xvf master_snapshot.tar
	unzip master_snapshot.zip
	If you used mysqldump instead, you have to wait until the server is back up.
	Now bring up the slave:
	bin/mysqld_safe --user=mysql --skip-slave-start --log-warnings
	If you took your master data snapshot with mysqldump, now is the time to apply the SQL file
	to the slave:
	mysql -u root -p databasename < master_snapshot.sql
	Finally, you will establish the master-slave relationship. Log in to a mysql shell and then 
	enter the following commands, substituting the values you wrote down at the beginning of
	the process:
	CHANGE MASTER TO
	MASTER_HOST=\92masterhostname\92,
	MASTER_USER=\92replicant\92,
	MASTER_PASSWORD=\92replpwd\92,
	MASTER_LOG_FILE=\92\92,
	MASTER_LOG_POS=4;
	START SLAVE;
	If there are problems, they will appear in the slave machine\92s error log.



144- MySQL Recovery

	Normally, MySQL does not require much attention. MySQL servers have happily puttered
	away for months if not years with minimal administration. However, bad things do happen 
	to data: Hard disks melt down, hosting centers lose power suddenly, and human error is a
	constant and awful probability. If you have insufficient memory for all the applications you\92re
	running on a server, or insufficient disk space on a partition, you may also get an error that
	requires a recovery process. It must be admitted that MySQL seems to have minor database
	corruption events with greater frequency than heavier-weight databases \97 or perhaps it\92s
	just easier for the administrator to notice these events.
	
145-  the method of adding jQuery UI tabs to a html or php page

		<!-- we need these two lines fot tabs-->   
		<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" />
		<script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
		
		<!-- we do not need this one. it will be included by Yii-->
		<!-- <script type="text/javascript" src="js/jquery-1.8.3.min.js"></script> -->
			
		<script>
		$(function() {
			$("#tabs").tabs();
		});
		</script>
		 
		<div id="tabs">
			<ul>
				<li><a href="#tabs-1">Search Hotel</a></li>
				<li><a href="#tabs-2">Search Flight</a></li>
			</ul>
			<div id="tabs-1">
				<p>search hotel contents....</p>
			</div>
			<div id="tabs-2">
				<p>Search Flight contents....</p>
			</div>
		</div>

		
146-  an example og using jquery ui in a view file

		<?php
		/* @var $this SiteController */
		$this->pageTitle=Yii::app()->name;   
		?>

		<!-- we need these two lines for tabs-->   
		<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" />
		<script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>

		<!-- tabs function call -->     
		<script>
		$(function() {
			$("#tabs").tabs();
		});
		</script>

		<!-- datepicker function call-->
		<script>
			$(function() {
				$( "#datepickerCheckin" ).datepicker({
				changeMonth: true,//user can change month
				changeYear: true, //user can change year
				yearRange: '2012:2100', //range of valid years
				dateFormat : 'dd/mm/yy',//date format
				});
				
				$( "#datepickerCheckout" ).datepicker({
				changeMonth: true,//user can change month
				changeYear: true, //user can change year
				yearRange: '2012:2100', //range of valid years
				dateFormat : 'dd/mm/yy',//date format
				});
			});
		</script>
		<!-- end of datepicker function call--> 

		<div id="tabs">
			<ul>
				<li><a href="#tabs-1">Search Hotel</a></li>
				<li><a href="#tabs-2">Search Flight</a></li>
			</ul>
			<div id="tabs-1">
				<div>
					City:<br>
					<?php $this->widget('bootstrap.widgets.TbSelect2', array(
								'asDropDownList' => false,
								'name' => 'city',
								'options' => array(
									'tags' => $citiesName,
									'placeholder' => 'City Name',
									'width' => '20%',
									//'tokenSeparators' => array(',', ' ')
								)  
							));
					 ?> 
				 </div>
				 <div>
					 Category:<br>
					 <?php $this->widget('bootstrap.widgets.TbSelect2', array(
								'asDropDownList' => false,
								'name' => 'category',
								'options' => array(
									'tags' => array('Two starts', 'Three starts', 'Four starts', 'Five starts' ),
									'placeholder' => 'Category of Hotel',
									'width' => '20%',
									//'tokenSeparators' => array(',', ' ')
								)  
							));
					 ?> 
				 </div>
				 <div>
					 Room Type:<br>
					 <?php $this->widget('bootstrap.widgets.TbSelect2', array(
								'asDropDownList' => false,
								'name' => 'roomType',
								'options' => array(
									'tags' => array('Two starts', 'Three starts', 'Four starts', 'Five starts' ),
									'placeholder' => 'Room type',
									'width' => '20%',
									//'tokenSeparators' => array(',', ' ')
								)  
							));
					 ?> 
				 </div>
				 <div>
					 Number of room(s):<br>
					 <?php $this->widget('bootstrap.widgets.TbSelect2', array(
								'asDropDownList' => false,
								'name' => 'noOfRooms',
								'options' => array(
									'tags' => array('1','2','3','4','5','6','7','8','9','10'),
									'placeholder' => 'Number of rooms',
									'width' => '20%',
									//'tokenSeparators' => array(',', ' ')
								)  
							));
					 ?> 
				 </div>
				 
				<!-- datepickers-->
				<div >
					Check in date:<br>
					<input type="text" id="datepickerCheckin" />
				</div>
				<div >
					Check out date:<br>
					<input type="text" id="datepickerCheckout" />
				</div>
			</div>
			<div id="tabs-2">
				my second tab
			</div>
		</div>


147- some global variables in yii

		Yii::app()->homeUrl           		---->  /index.php
		Yii::app()->user->isGuest     		---->  1
		Yii::app()->user->name        		---->  Guest
		Yii::app()->user->id          		---->
		Yii::app()->request->baseUrl  		---->  http://kamran.dev.travelagancy.com:81/
		Yii::app()->theme->baseUrl    		---->  /themes/kamran_theme1
		Yii::app()->createAbsoluteUrl('') 	---->  http://kamran.dev.travelagancy.com:81/index.php
		Yii::app()->basePath         		---->  G:\GitHub\travelagency\protected 
		Yii::app()->createAbsoluteUrl('hotel/admin') ---->  http://kamran.dev.travelagancy.com:81/index.php?r=hotel/admin
		
		
148- the way we can use zii.widgets.jui.CJuiButton button for ajax call
		
		IMPORTANT NOTE: DatePicker that is included in Yiibooster has bug, that is why I have used datepicker of jQuery UI

		<!-- we need these two lines for tabs and datepickers-->
		<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" />
		<script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>

		<!-- datepicker function call-->
		<script>
			$(function() {
				$("#datepickerCheckin").datepicker({
					changeMonth: true, //user can change month
					changeYear: true, //user can change year
					yearRange: '2013:2100', //range of valid years
					dateFormat: 'yy/mm/dd', //date format
				});
				$("#datepickerCheckout").datepicker({
					changeMonth: true, //user can change month
					changeYear: true, //user can change year
					yearRange: '2013:2100', //range of valid years
					dateFormat: 'yy/mm/dd', //date format
				});
			});
		</script>
		<!-- end of datepicker function call-->
		<div class="KContainer">
			<div class="KLeft">
				<?php
				$form = $this->beginWidget('bootstrap.widgets.TbActiveForm', array(
					'id' => 'SearcHotelTabForm',
					'enableClientValidation' => true,
					'enableAjaxValidation' => false,
					'clientOptions' => array(
						'validateOnSubmit' => true,
					),
					'htmlOptions' => array(
						'class' => 'well',
						/* Disable normal form submit */
						'onsubmit' => "return false;",
						/* Do ajax call when user presses enter key */
						'onkeypress' => " if(event.keyCode == 13){ sendAjaxRequestSearchHotel(); } "
					),
						));
				?>
				<?php echo $form->errorSummary($modelHotel); ?>
				<div>
					City:<br>
					<?php
					$this->widget('bootstrap.widgets.TbSelect2', array(
						'asDropDownList' => false,
						'model' => $modelHotel,
						'attribute' => 'cityName',
						'options' => array(
							'tags' => $citiesName,
							'placeholder' => 'City Name',
							'width' => '243px;',
						//'tokenSeparators' => array(',', ' ')
						)
					));
					?>
				</div>
				<div>
					Category:<br>
					<?php
					$this->widget('bootstrap.widgets.TbSelect2', array(
						'asDropDownList' => false,
						'model' => $modelHotel,
						'attribute' => 'category',
						'options' => array(
							'tags' => array('Two starts', 'Three starts', 'Four starts', 'Five starts'),
							'placeholder' => 'Category of Hotel',
							'width' => '243px;',
						//'tokenSeparators' => array(',', ' ')
						)
					));
					?>
				</div>
				<div>
					Room Type:<br>
					<?php
					$this->widget('bootstrap.widgets.TbSelect2', array(
						'asDropDownList' => false,
						'model' => $modelHotel,
						'attribute' => 'roomType',
						'options' => array(
							'tags' => $roomTypes,
							'placeholder' => 'Room type',
							'width' => '243px;',
						//'tokenSeparators' => array(',', ' ')
						)
					));
					?>
				</div>
				<div>
					Number of room(s):<br>
					<?php
					$this->widget('bootstrap.widgets.TbSelect2', array(
						'asDropDownList' => false,
						'model' => $modelHotel,
						'attribute' => 'noOfRooms',
						'options' => array(
							'tags' => array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'),
							'placeholder' => 'Number of rooms',
							'width' => '243px;',
						//'tokenSeparators' => array(',', ' ')
						)
					));
					?>
				</div>
				<!-- datepickers come here-->
				<div >
					Check in date:<br>
					<input type="text" name="datepickerCheckin" id="datepickerCheckin" />
				</div>
				<div >
					Check out date:<br>
					<input type="text" name="datepickerCheckout" id="datepickerCheckout" />
				</div>
				<!-- end of datepickers -->
				<br>
				<?php
				//this is one method to ajax call by normal html button
				// echo CHtml::Button('search Hotel2', array('onclick' => 'sendAjaxRequestSearchHotel();'));
				?>
				<div class="KOuterDiv">
					<div class="KCenter">
						<?php
						$this->widget('zii.widgets.jui.CJuiButton', array(
							'name' => 'submit',
							'caption' => 'Search Hotel',
							// you can easily change the look of the button by providing the correct class
							// ui-button-error, ui-button-primary, ui-button-success
							'htmlOptions' => array('class' => 'ui-button-success'),
							// this is a sample of calling inline jQuery function
							//'onclick' => new CJavaScriptExpression('function(){alert("Yes kamran");}'),
							// this is a sample of calling a function that uses ajax method to send request to controller
							'onclick' => new CJavaScriptExpression('function(){sendAjaxRequestSearchHotel();}'),
						));
						?>
					</div>
				</div>
				<?php $this->endWidget(); ?>
			</div>
			<div class="well KContent" id="searchHotelResults">
				right section................
			</div>
		</div>
		<script>
			function sendAjaxRequestSearchHotel()
			{
				var checkinDate = $('#datepickerCheckin').val();
				var checkoutDate = $('#datepickerCheckout').val();
				if (checkoutDate < checkinDate)
				{
					alert('chechout date should be greater than or equal to checkin date.');
					return false;
				}
				var data = $('#SearcHotelTabForm').serialize();
				urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('site/searchHotel'); ?>'
				alert(urlAjax);
				$.ajax({
					type: 'POST',
					url: urlAjax,
					data: data,
					success: function(data) {
						//alert('success');
						//alert(data);
						// change the text on the screen with id = searchHotelResults
						$('#searchHotelResults').text('');  //clear div
						$('#searchHotelResults').append(data);
					},
					error: function(data) { // if error occured
						alert('Error occured. please try again');
						//alert(data);
					},
					dataType: 'html',
					timeout: 60000
				});
			}
		</script>




149- the way to center a div inside another div

	<style>
		.Outer {
		  width: 100%;
		  text-align: center;
		}

		.Center {
		  display: inline-block;
		}
	</style>
	
	<body>
		<div class="Outer" >  
		 <div class="Center">Foo foo</div>
		</div>
	</body>
	

150- Can I assign a java script variable to a PHP variable ?
		NO. Javascript doesn't run until it reaches the user's browser. This is called client side.	PHP is server side. All your PHP code executes before the web page is delivered to the user. Then your Javascript is executed on their own computer, by their web browser.
		
		but the reverse is possible. we can save PHP expressions or variables in javascript variables. for example:
		
			<script>
			function sendAjaxRequestSearchHotel()
			{
				urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('site/searchHotel'); ?>';
				....
			}
			</script>

			
151- Javascript debugging and Netbeans or PhpEd
	
	netbeans and javascript debugging

	My advice is to ignore the Netbeans JS debugger and just use Firebug. It's 
	annoying not to be able to do all your debugging from Netbeans, but the Netbeans 
	JavaScript debugger is just too unreliable to be usable.
	
	so in short: forget about netbeans' javascript debugging and use firebug inside firefox.
	the firebug lite for chrome cannot do single step or breakpoint!!!
	
	when you have clicked the debug button on netbeans (ctrl + F5), the firefox will be open. press F12 key
	when firefox is focused and select reload, the source of web page will be reload on the firebug. now you can
	put breakpoints on the lines you like and do single step inside firefox
	
	NOTE: this method can be used with PhpEd too.


152- when we see in bunch assignments like
	
			$searchHotelForm->attributes = $_POST['SearchHotelForm']
		
		some attributes NEVER be assigned to correct values, we should define them as safe in the rules function of model class
		
			 public function rules()
			{
				return array(
					....
					array('category, roomType', 'safe'),
					....
				);
			}
		
		
		
153- the way to write a criteria with some conditions and sql injection safe

		example 1:
		
			$criteria = new CDbCriteria;
			$schedule_run = new schedule_run;
			$criteria->condition = "1 ";
			if(isset($_POST['sch_script']))
			{
				$criteria->condition .= " AND sch_script like :input_script";
				$criteria->params = array_merge($criteria->params,array(":input_script"=>"%".$_POST['sch_script']."%"));
			}
			if(isset($_GET['sch_stat']))
			{
				$criteria->condition .= " AND sch_stat like :input_stat";
				$criteria->params = array_merge($criteria->params,array(":input_script"=>"%".$_GET['sch_stat']."%"));
			}

			if (!isset($_GET['sort']))
			{
				$criteria->order = "schrun_start desc";
			} 
		
		example 2:
		
			$criteria = new CDbCriteria;
			// just select those that are candidate to be empty at that interval
			$criteria->condition = "(CheckinDate < str_to_date(:checkinDate, '%Y-%m-%d') AND CheckinDate > str_to_date(:checkoutDate, '%Y-%m-%d'))";
			$criteria->condition .= " AND (CheckoutDate < str_to_date(:checkinDate, '%Y-%m-%d') AND CheckoutDate > str_to_date(:checkoutDate, '%Y-%m-%d'))";
			$criteria->params = array(':checkinDate' => $searchHotelForm->checkinDate, ':checkoutDate' => $searchHotelForm->checkoutDate);
			
			//NOTE: $criteria->compare: Adds a comparison expression to the condition property.
			$criteria->compare('CityName', $searchHotelForm->cityName);
			if (!empty($searchHotelForm->category))
				$criteria->compare('HotelCategory', $searchHotelForm->category);
			if (!empty($searchHotelForm->roomType))
				$criteria->compare('RoomType', $searchHotelForm->roomType);
			// $criteria->compare('noOfRooms', $searchHotelForm->noOfRooms);
			
			$criteria->order = "RoomId desc";
			
			$roomClients = Search4EmptyRoomView::model()->findAll($criteria);

		example3:
		
			$set = '(-1';
			foreach ($freeRoomIds as $key => $value)
			{
				 $set .= ', '.$freeRoomIds[$key];  
			}
			$set .= ')';
		
			$criteria= new CDbCriteria;
			$criteria->select = array('RoomId', 'RoomNumber', 'HotelName', 
				'HotelCategory', 'RoomType', 'PricePerDay', 'HotelAddress');
			$criteria->distinct = true;
			$criteria->condition = " RoomId IN $set";
			$rooms = Search4EmptyRoomView::model()->findAll($criteria);
			
			
		
154- 	To include a css file that is in the webroot/css directory, put this in the view file:

			<?php Yii::app()->clientScript->registerCssFile(Yii::app()->baseUrl.'/css/some-file.css'); ?>
			
		Or for JS file in the  webroot/js directory, put this in the view file:

			<?php Yii::app()->clientScript->registerScriptFile(Yii::app()->baseUrl.'/js/some-file.js');?>
	
		as another example : for registering an external js or css file on Yii, on the top of caller view (e.g. index.php) we should write

		<?php
			// for js file -->  registerScriptFile
		   Yii::app()->clientScript->registerScriptFile(
				Yii::app()->baseUrl.'/jqwidgets-ver2.6.0/jqwidgets/jqxcore.js'
		   );
		   Yii::app()->clientScript->registerScriptFile(
				Yii::app()->baseUrl.'/jqwidgets-ver2.6.0/jqwidgets/jqxdata.js'
		   );
		   Yii::app()->clientScript->registerScriptFile(
				Yii::app()->baseUrl.'/jqwidgets-ver2.6.0/scripts/jquery-1.8.2.min.js'
		   );
		   Yii::app()->clientScript->registerScriptFile(
				Yii::app()->baseUrl.'/jqwidgets-ver2.6.0/jqwidgets/generatedata.js'
		   );
		   
		   // for css file    --> registerCssFile
		   Yii::app()->clientScript->registerCssFile(
				Yii::app()->baseUrl.'/jqwidgets-ver2.6.0/styles/jqx.base.css'
		   );
		   
		?>
		
		as third example: we can define a function in the controller class like:
		
			/**
			* Registers the necessary scripts.
			*/
			public function registerScripts()
			{
				// Get the url to the assets
				$assetsUrl = $this->getAssetsUrl();

				// Register the necessary scripts
				$cs = Yii::app()->getClientScript();
				$cs->registerCoreScript('jquery');
				$cs->registerCoreScript('jquery.ui');
				$cs->registerScriptFile($assetsUrl.'/js/rights.js');
				$cs->registerCssFile($assetsUrl.'/css/core.css');

				// Make sure we want to register a style sheet.
				if( $this->cssFile!==false )
				{
					// Default style sheet is used unless one is provided.
					if( $this->cssFile===null )
						$this->cssFile = $assetsUrl.'/css/default.css';
					else
						$this->cssFile = Yii::app()->request->baseUrl.$this->cssFile;

					// Register the style sheet
					$cs->registerCssFile($this->cssFile);
				}
			}
			
		and call this function on init() function of controllers
		
			public function init()
			{
				// do some initialization

				// Register the scripts
				$this->registerScripts();
				
				// maybe we need this too
				parent::init();
			}
		
155- 	but in the theme this method is used by Yii

			<head>
				<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
				<meta name="language" content="en" />

				<!-- blueprint CSS framework -->
				<link rel="stylesheet" type="text/css" href="<?php echo Yii::app()->theme->baseUrl; ?>/css/screen.css" media="screen, projection" />
				<link rel="stylesheet" type="text/css" href="<?php echo Yii::app()->theme->baseUrl; ?>/css/print.css" media="print" />
				<!--[if lt IE 8]>
				<link rel="stylesheet" type="text/css" href="<?php echo Yii::app()->theme->baseUrl; ?>/css/ie.css" media="screen, projection" />
				<![endif]-->

				<link rel="stylesheet" type="text/css" href="<?php echo Yii::app()->theme->baseUrl; ?>/css/main.css" />
				<link rel="stylesheet" type="text/css" href="<?php echo Yii::app()->theme->baseUrl; ?>/css/form.css" />

				<title><?php echo CHtml::encode($this->pageTitle); ?></title>
			</head>
			
			so when I did like this i really could use jqwidjet 2.6.0 on the view file ( e.g. index.php) . it is obvious that jqwidget-ver2.6.0
			is in the webroot folder.  --> very important
			
			ALL of lines in the index.php file are (first copy generatedata.js file into /jqwidgets-ver2.6.0/jqwidgets/ folder):
			
				<title id='Description'>This example illustrates the Grid filtering feature. Enter some data into the Filter Row.</title>
				<link rel="stylesheet" href="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/styles/jqx.base.css" type="text/css" />
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/scripts/jquery-1.8.2.min.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxcore.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxdata.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxbuttons.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxscrollbar.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxlistbox.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxdropdownlist.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxmenu.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxgrid.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxgrid.filter.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxgrid.sort.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxgrid.selection.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxpanel.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxcalendar.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxdatetimeinput.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/jqxcheckbox.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/globalization/jquery.global.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/scripts/gettheme.js"></script>
				<script type="text/javascript" src="<?php echo Yii::app()->baseUrl; ?>/jqwidgets-ver2.6.0/jqwidgets/generatedata.js"></script>
				<script type="text/javascript">
				
					$(document).ready(function () {
						var theme = getTheme();

						var data = generatedata(500);
						var source =
						{
							localdata: data,
							datafields:
							[
								{ name: 'name', type: 'string' },
								{ name: 'productname', type: 'string' },
								{ name: 'available', type: 'bool' },
								{ name: 'date', type: 'date'},
								{ name: 'quantity', type: 'number' }
							],
							datatype: "array"
						};

						var dataAdapter = new $.jqx.dataAdapter(source);

						$("#jqxgrid").jqxGrid(
						{
							width: 685,
							source: dataAdapter,
							showfilterrow: true,
							filterable: true,
							theme: theme,
							selectionmode: 'multiplecellsextended',
							columns: [
							  { text: 'Name', columntype: 'textbox', filtertype: 'textbox', filtercondition: 'starts_with', datafield: 'name', width: 115 },
							  {
								  text: 'Product', filtertype: 'checkedlist', datafield: 'productname', width: 220
							  },
							  { text: 'Available', datafield: 'available', columntype: 'checkbox', filtertype: 'bool', width: 67 },
							  { text: 'Ship Date', datafield: 'date', filtertype: 'date', width: 210, cellsalign: 'right', cellsformat: 'd' },
							  { text: 'Qty.', datafield: 'quantity', filtertype: 'number',  cellsalign: 'right' }
							]
						});
						$('#clearfilteringbutton').jqxButton({ height: 25, theme: theme });
						$('#clearfilteringbutton').click(function () {
							$("#jqxgrid").jqxGrid('clearfilters');
						});
					});
				</script>
				<div id="jqxgrid">
				</div>
				<input style="margin-top: 10px;" value="Remove Filter" id="clearfilteringbutton" type="button" />


		
		
156-    sample ajax call in yii  -->really works

		<script>
		
		function sendAjaxRequestSearchHotel()
		{
			var checkinDate = $('#datepickerCheckin').val();
			var checkoutDate = $('#datepickerCheckout').val();
			
			if (checkinDate.length != 10)
				alert('Bad checkin Date');
			if (checkoutDate.length != 10)
				alert('Bad checkout Date');
			if (checkoutDate < checkinDate)
			{
				alert('Checkout date should be greater than or equal to checkin date.');
				return false;
			}
			var data = $('#SearchHotelTabForm').serialize();
			urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('site/searchHotel'); ?>'
			// alert(urlAjax);
			$.ajax({
				type: 'POST',
				url: urlAjax,
				data: data,
				success: function(data) {
					//alert('success');
					//alert(data);
					// change the text on the screen with id = searchHotelResults
					$('#searchHotelResults').text('');  //clear div
					// write new data on it (results of actionSearchHotel() function on siteController)
					$('#searchHotelResults').append(data);
				},
				error: function(data) { // if error occured
					alert('Error occured. please try again');
					//alert(data);
				},
				dataType: 'html',
				timeout: 60000
			});
		}
		
		</script>
		
		
157- select2 component in Yiibooster has some problems(like datepicker in Yiibooster) and when we add a component from jqwidjet, they will disapear!!!


158- if we have created a json output in controller with a method like this:

		// controller section
		
		public function actionCreateSomething()
		{
			............
			// if there is no result, send special json data
			if (count($freeRoomIds) == 0)
			{
				$result[0] = array('RoomId' => 'NOT FOUND');  
				$result = json_encode($result);
				
				return true;
			}
			
			
			// if there are results convert them to array and then to json and send json using echo function
			foreach ($rooms as $key => $value)
			{
				// create array of results
				$result[] = array(
					'RoomId' => $rooms[$key]->RoomId,
					'CityName' => $rooms[$key]->CityName,
					'HotleName' => $rooms[$key]->HotelName,
					'RoomType' => $rooms[$key]->RoomType,
					'PricePerDay' => $rooms[$key]->PricePerDay,
					'HotelTel' => $rooms[$key]->HotelTel
				);  
			}

			// convert array to json and send to ajax caller function
			echo json_encode($result);
		}	
		
		-- in the view file(e.g. index.php) the caller and shower jquery function should be like
		
		
			<!-- view section -->
			<script>
			function sendAjaxRequestSearchHotel()
			{
				var checkinDate = $('#datepickerCheckin').val();
				var checkoutDate = $('#datepickerCheckout').val();
				
				if (checkinDate.length != 10)
					alert('Bad checkin Date');
				if (checkoutDate.length != 10)
					alert('Bad checkout Date');
				if (checkoutDate < checkinDate)
				{
					alert('Checkout date should be greater than or equal to checkin date+');
					return false;
				}
				var data = $('#SearchHotelTabForm').serialize();
				urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('site/searchHotel'); ?>'
				// alert(urlAjax);
				$.ajax({
					type: 'POST',
					url: urlAjax,
					data: data,
					success: function(data) {
						// change the text on the screen with id = searchHotelResults
						$('#searchHotelResults').text('');  //clear div
						// write new data on it (results of actionSearchHotel() function on siteController)
						$('#searchHotelResults').append(showResults(data));
					},
					error: function(data) { // if error occured
						alert('Error occured. please try again');
					},
					dataType: 'json', // this is the type of data we are receiving
									  // from the controller not the data we 
									  // are sending to it
					timeout: 60000
				});
			}
			
			// creates an HTML table according to the json data 
			// that is received from the controller
			function showResults(data)
			{
				if (data[0].RoomId == 'NOT FOUND')
				{
					return '<h1 style= "text-align: center"> Sorry, there is not any result.</h1>';
				}
				// create output table
				var result = '<h1 style= "text-align: center"> Search results</h1><br>';
				result += '<table class="Ktable"><tr><td style= "padding: .3em; border: 1px #ccc solid;">';
				result += 'City Name</td><td style= "padding: .3em; border: 1px #ccc solid;">Hotel Name</td><td style= "padding: .3em; border: 1px #ccc solid;">Hotel Category</td>';
				result += '<td style= "padding: .3em; border: 1px #ccc solid;">Room Type</td><td style= "padding: .3em; border: 1px #ccc solid;">Price/day (CND)</td><td style= "padding: .3em; border: 1px #ccc solid;">';
				result += 'Hotel Phone number</td></tr>';
				
				for (var i=0; i< data.length; i++)
				{
					result += '<tr><td style= "padding: .3em; border: 1px #ccc solid;">'
						+data[i].CityName+'</td><td style= "padding: .3em; border: 1px #ccc solid;">';
					result += data[i].HotelName+'</td><td style= "padding: .3em; border: 1px #ccc solid;">'
						+data[i].HotelCategory+'</td>';
					result += '<td style= "padding: .3em; border: 1px #ccc solid;">'+data[i].RoomType+'</td><td style= "padding: .3em; border: 1px #ccc solid;">'
						+data[i].PricePerDay+
						'</td><td style= "padding: .3em; border: 1px #ccc solid;">';
					result += data[i].HotelTel+'</td></tr>';  
				} 
				
				result += '</table>';
				return result;
			} 
		</script>
		
		
159- to find all checkboxes with class="MyClass" using jquery

			$('input:checkbox.MyClass').each(function () {
				// do you things. for example
				 var sThisVal = (this.checked ? $(this).val() : "");
			});
			
160- in the previous notes we showed how to use Ajax call with POST method. here we show how to do a GET ajax (ajax get)call

		// the javascript/jQuery section in the view file:
			function reserveRoomsUsingAjax()
			{
				// find all checkboxes
				var selectedRooms = '';

				$('input:checkbox[name=reserveRoom]:checked').each(function () {
					 selectedRooms +=  $(this).val() + ',';
				});
				
				if (selectedRooms == '')
				{
					alert('you should select at least one room.');
					return;
				}
				
				// delete the last ','
				var strLen = selectedRooms.length;
				selectedRooms = selectedRooms.slice(0, strLen-1);
				
				var checkinDate = $('#datepickerCheckin').val();
				var checkoutDate = $('#datepickerCheckout').val();
				
				if (checkinDate.length != 10)
				{
					alert('Bad checkin Date.');
					return;
				}
				if (checkoutDate.length != 10)
				{
					alert('Bad checkout Date.');
					return;
				}
				if (checkoutDate < checkinDate)
				{
					alert('Checkout date should be greater than or equal to checkin date.');
					return;
				}
				
				var getData = 'params=' + checkinDate + ';'+ checkoutDate + ';'+ selectedRooms;
				var urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('site/reserveRooms'); ?>';
				
				// change the button caption
				$('#reserveRoom').val('Sending, Please wait...');
				
				// send Ajax request
				$.ajax({
					type: 'GET',
					url: urlAjax,
					data: getData,
					success: function(data) {
						// change the text on the screen with id = searchHotelResults
						$('#searchHotelResults').text('');  //clear div
						
						alert(data[0].result);
						$('#searchHotelResults').append('reservation datails....');
						
						// hide the button
						$('#reserveRoom').hide();
						
					},
					error: function(data) { // if error occured
						alert('Error occured. please try again.');

						// show the button
						$('#reserveRoom').val('Reserve selected room(s)');
					},
					dataType: 'json', // this is the type of data we are receiving
									  // from the controller not the data we
									  // are sending to it
					timeout: 60000
				});
				
			}
    
		// the action function in the controller
		
			public function actionReserveRooms()
			{
				// extract data from get parameters
				$getParams = explode(';', $_GET['params']); 
				$checkinDate = $getParams[0];
				$checkoutDate = $getParams[1];
				$rooms = explode(',', $getParams[2]);
				
				// first check the client is authorized
				if (Yii::app()->user->isGuest)
				{
					$result[] = array(
						'result' => '<h2>You are not an authorized user. So you cannot reserve a room.</h2>'
					);
					echo json_encode($result);
					return true;
				}
				
				// Reserve the rooms
				......
				
				echo json_encode($result);
				return true;
				
			}
		
		
161-	security note: whenever we do a search using model()->find() or model()->findAll() or similar methods we should check
	    is there any result or not to avoid program break.
		
		the correct method is like below:
			
			// get clientId
			$client = Client::model()->find('UserId = :userId', 
				array(':userId' => Yii::app()->user->id));
		
			// check the results of the query
			if (empty($client))
			{
				// there is no results, so just show error message
				$result = '<h3>No data was found for this client.</h3>';
				Yii::app()->user->setFlash('error',$result);
				$this->render('confirm');
				return;
			}
			
			// there is a result, so use the object
			$clientId = $client->Id;


			
162- Important note: How to upload travelagency on a real host (khpec.biz)

		a) in the remote host(khpec.biz) create a folder and call it 'kamran', then create two subfolders and call them
			'yii' and 'travelagency' inside 'kamran' folder.
		b) ftp yii 1.1.13 inside kamran/yii folder ( we DO need to upload yii framework, otherwise it does not work)
		c) ftp inside of travelagency folder on local pc to kamran/travelagency folder on khpec.biz 
			Note:
			we do not need to copy assets, .git, .settings, phpEd5.9, and db_scripts folders, but create an empty assets folder on 
			kamran/travelagency remote folder (and chmod it to 777).
		
		d) create a db and a db user in khpec.biz using cPanel and assign the user to db with full previllage		
		e) create a "backup" of your local db on your pc and save it as a SQL file (*.sql) BE SURE THAT DATA IS INCLUDED IN THIS FILE 
			and it is not just db definition sql file.
		f) open *.sql file with notepad++ and replace db name with db name you have created on the khpec( e.g. khpec_travelagency)
		g) delete DEFINER = 'root'@'localhost' from *.sql file.(many times it apears on it. delete all of them.)
		h) use mysqladmin on cpanel of the khpec.biz to import the sql file that is on our local pc on the remote server 
			using import option of mysqladmin.
		i) open kamran/travelagency/protected/config/main.php on the remote server and edit the mysql section of it. 
			like:
			
			'db' => array(
				'connectionString' => 'mysql:host=127.0.0.1;dbname=khpec_travelagency',
				'emulatePrepare' => true,
				'username' => 'khpec_joomla',
				'password' => 'your_pass_here',
				'charset' => 'utf8',
			),
			
		j) create a subdomain for http://khpec.biz/kamran/travelagency like ta.khpec.biz
		k) navigate to http://ta.khpec.biz
		l) if we get an error about a table like :
		
					CDbCommand failed to execute the SQL statement: SQLSTATE[42S02]: Base table or view not found: 1146 Table 'khpec_travelagency.AuthAssignment' doesn't exist. The SQL statement executed was: SELECT *
					FROM `AuthAssignment`
					WHERE userid=:userid
					
			it is because that in windows, tables names are case insensitive but in linux it is. so we should adjust the case sensitivity of
			table names for linux and change the name of tables to correct case using commands like
				
				RENAME TABLE `authassignment` TO `AuthAssignment` ;
				RENAME TABLE `authitem` TO `AuthItem` ;
				RENAME TABLE `authitemchild` TO `AuthItemChild` ;
				RENAME TABLE `rights` TO `Rights` ;				
				
			on mysqladmin of remote site. In addition, model classes related to these tables should be changed too:
					
				public function tableName()
				{
					return 'authassignment';
				}
				
				'authassignment' ---> 'AuthAssignment'
				
				the same process for these tables too:
				
				AuthItem
				AuthItemChild
				Rights
					
		m) navigate to http://ta.khpec.biz now everything should be ok
		
		SO WE CAN REALIZE HOW MUCH IT IS IMPORTANT TO DEVELOP ON REAL LINUX OR USE VAGRANT TO DEVELOP PHP SOFTWARE.
				
				
		
163-  the creators of Yii and advanced users use this methods to update their remote servers for deploying yii projects

		http://www.yiiframework.com/forum/index.php/topic/7368-deployment-automation/
		
		this is the way that creator of Yii does
		
			We are using "svn update" to deploy. It usually happens that you may find bugs or add new features after the system is deployed for the first time. Then you will appreciate how convenient "svn update" is. To make it safer, you could use svn branches to make sure you only "svn update" on the production server when you think the code is stable enough. 
		
		
164-  a free software to replace a text in the files inside a folder and all of its subfolders:

			Replace text 2.2 free

			http://www.ecobyte.com/replacetext/
		
165- if we are going to add a javascript or ajax function to Yiibooster or zii components we should change

			<?php echo $form->dropDownListRow($model, 'DepartureAirportId', $model->getAirports(), array('class' => 'span5')); ?>
		
		to this
		
			<?php echo $form->dropDownListRow($model, 'DepartureAirportId', $model->getAirports(), array('class' => 'span5', 'onchange' => 'Myfunction();')); ?>

		and you ajax or javascript should be
		
			<script>
				function Myfunction()
				{
					alert(' hi');
					// other java script, jquery or even Ajax calls comes here
				}
			</script>

166- IMPORTANT NOTE: the events we can add to input or list or combobox on html (or Yiibooster or zii widgets ) are:

		HTML Event Attributes
		
		http://www.w3schools.com/tags/ref_eventattributes.asp
		
		
167- a cleaner way to create a dependent combobox is

			on the view (_form.php)
				
				<?php $form=$this->beginWidget('bootstrap.widgets.TbActiveForm',array(
					'id'=>'flight-form',
					'enableClientValidation' => true,
					'enableAjaxValidation' => false,
					'clientOptions' => array(
						'validateOnSubmit' => true,
					),
				)); ?>

				<?php echo $form->dropDownListRow($model, 'AirlineId', $model->getAirlines(), array('class' => 'span5', 'onclick' => 'ajaxGetAirplane();')); ?>

				<?php echo $form->dropDownListRow($model, 'AirplaneId', array(), array('class' => 'span5')); ?>

				.....
				.....
				
				<script >
				function ajaxGetAirplane()
				{
					var airlineId= $('#Flight_AirlineId').val();
					//alert(airlineId);
					$('#Flight_AirplaneId').empty().append('please wait...');
					
					var data1 = 'airlineId=' + airlineId;
					var urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('flight/dynamicAirplane'); ?>';
					
					// send Ajax request
					$.ajax({
						type: 'GET',
						url: urlAjax,
						data: data1,
						success: function(data) {
							//alert('success');
							//alert(data);
							// empty combobox
							$('#Flight_AirplaneId').empty();
							// change the text on the screen with id = Flight_AirplaneId
							$('#Flight_AirplaneId').append(data);  
						},
						error: function(data) { // if error occured
							alert('Error occured. please try again.');

						},
						dataType:'html', // this is the type of data we are receiving
										  // from the controller not the data we
										  // are sending to it
						timeout: 60000
					});
				}
			</script>
		
		-- and on the controller
		
			//Kamran
			public function actionDynamicAirplane()
			{
				$airlineId = (int) $_GET['airlineId'];
				$airplanes = Airplane::model()->findAll('AirlineId = :airlineId', array(':airlineId' => $airlineId));

				// add one blank line
				echo CHtml::tag('option', array('value' => 0), CHtml::encode('Please select...'), true);
				foreach ($airplanes as $value => $name)
				{
					echo CHtml::tag('option', array('value' => $value), CHtml::encode($airplanes[$value]->Name), true);
				}
			}
		
		so when the lostfocus(onblur) event on the first combo happens, the second combo will be filled via ajax get call to 
		the action actionDynamicAirplane() on the controller


168- to encrypt your php code use sourceguardian 9.01 --> 200$
	
	 in addition--> NuSphere Nu-Coder is for encoding and increasing runtime speed of php -> 300$
	 
	 both of these products need you copy a file on php/ext folder and add extension=somefile to your
	 php.ini file. so you should have access to php/ext folder and php.ini file too.
	 
	 
169- to create a symbliic link to g:\Github\travelagency on linux mint

	sudo ln -s  /media/01CD9EA143AA4D10/GitHub/travelagency /var/www/travelagency

170- but there is a software to decode all of them

		http://dezender.net/  --> 1000 Euro
		
		this site says that ionCube is the best encryptor but they can break even it too.
		
		
171- How to repair and optimize databases using phpMyAdmin:

		Occasionally the MySQL database may run slower than desired. This issue can be fixed quickly through phpMyAdmin.

		(Note: Please back up any database on the account before making changes)

		Log into cPanel.
		Click on phpMyAdmin.
		On the left will be a list of databases. Select the one to repair/optimize.
		This will load all of the tables in your database into the right side. At the bottom of this list, check the "Check All" checkbox.
		Just to the right of the Check All link, select the "Repair" option in the drop-down list.
		This will list all the tables, with "OK" listed next to them. When this is done, look up to the top of the page and click on the "Structure" tab.
		Once the process has finished the page will revert back to step 4.
		Click "Check All" again, and then choose "Optimize" in the drop down menu.
		Now the process is done!
		Many MySQL errors can be fixed by this process. It is recommended to perform these steps frequently to keep any database in good condition.

		(Note:If you are using InnoDB as a storage engine, we have noticed an issue regarding database size: For various reasons, it occasionally occurs that memory allocated to a customer for database usage is not released when it is no longer required by the database. This memory does not appear as in use when database size is viewed using phpMyAdmin, but since it is still allocated to the customer account, the server-side administrative tools will include it in calculations of overall database memory usage and determinations of whether or not an account has exceeded the database memory limits specified in the Terms of Service. The easiest way to free this "hidden" memory is to export the database information, completely clear the database, and re-import the information. This will cause phpMyAdmin and the server-side tools to report the actual database usage and prevent account deactivation due to the "hidden" memory usage. The repair/optimize function in phpMyAdmin will not correct this issue. The server-side tools report complete memory usage which is the information required to determine overall performance of the server, and that is why the server-side tools are used to determine usage for ToS compliance purposes. phpMyAdmin does not correctly report all memory usage allocated to the account and is therefore not used for these calculations.



172- increase php and apache response time

		You may do 2 things:

		Based on CGI/Server side engine increase timeout there

		PHP : http://www.php.net/manual/en/info.configuration.php#ini.max-execution-time - default is 30 seconds

		In php.ini:

		max_execution_time = 60
		
		Increase apache timeout

		http://httpd.apache.org/docs/2.0/mod/core.html#timeout - default is 300

		In your httpd.conf (in server config or vhost config)

		TimeOut = 600
		
		Note that first setting allows your PHP script to run longer, it will not interferre with network timeout.

		Second setting modify maximum amount of time the server will wait for certain events before failing a request

		
173-    Create a Unique Composite Key (Unique index) in MySQL
		or
		specify unique constraint for multiple columns in MySQL
	
			I have a table:

			table tbl_votes (
				id,
				user,
				email,
				address,
				primary key(id),
			);
			Now I want to make the columns user, email, address unique (together). (DB is MySQL)
		
		answer:
		
			alter table tbl_votes add unique index(user, email, address);
			
		in TA project I used that like
			
				ALTER TABLE flight_clients
				ADD UNIQUE INDEX (FlightId, SeatId);
		
		
174-  a good article about using Views for insert and update query:

			http://www.tutorialspoint.com/sql/sql-using-views.htm
		
		and more complete and professional reference
			
			http://dev.mysql.com/doc/refman/5.0/en/view-updatability.html
		
	in short drop, update and insert is not always possible on a view.


175- PHP and RESTfull service link

		http://www.openlogic.com/wazi/bid/215833/Apache-and-RESTful-Web-Services
		
		
176- what is amazon web services (AWS) or amazon cloud?
		
	Amazon Web Services (abbreviated AWS) is a collection of remote computing services (also called web services) that together make up a cloud computing platform, offered over the Internet by Amazon.com. The most central and well-known of these services are Amazon EC2 and Amazon S3.
	
	  
177- Amazon S3 (Simple Storage Service) is an online storage web service offered by Amazon Web Services. Amazon S3 provides storage through web services
		interfaces (REST, SOAP, and BitTorrent).[1] Amazon launched S3, its first publicly available web service, in the United States in March 2006[2] and in Europe in November 2007.[3]

178- Amazon Elastic Compute Cloud (EC2) is a central part of Amazon.com's cloud computing platform, Amazon Web Services (AWS). EC2 allows users to rent
		virtual computers on which to run their own computer applications. EC2 allows scalable deployment of applications by providing a Web service through which a user can boot an Amazon Machine Image to create a virtual machine, which Amazon calls an "instance", containing any software desired. A user can create, launch, and terminate server instances as needed, paying by the hour for active servers, hence the term "elastic". EC2 provides users with control over the geographical location of instances that allows for latency optimization and high levels of redundancy.
		
179- Apache mod_rewrite:
	
	  mod_rewrite is a module in apache web server that supports the URL's to be SE friendly.
	  

180- this is the method we can update a comboBox after clicking a button of onchange evenent of another combo box (In this example we use 
		clicking a button)

	a)on the view file (e.g. _form.php) the button should be define like
	
				<?php
					//this is one method for ajax call (using normal html button)
					echo CHtml::Button('Get Empty Seats', array('class' => ' ui-button ui-widget ui-state-default ui-corner-all',
					'id' => 'EmptySeats', 'onclick' => 'sendAjaxRequestGetEmptySeats();'));
				?>
			
			and the combobox should be
			
				
				<?php echo $form->dropDownListRow($model, 'SeatId', array(), array('class' => 'span7')); ?>
    
	
			
			and at the end of file write:
			
				<script>
				 function sendAjaxRequestGetEmptySeats()
					{
						// find flightId
						var flightId = $('#FlightClient_FlightId').val();
						
						var getData = 'params=' + flightId;
						var urlAjax = '<?php echo Yii::app()->createAbsoluteUrl('flightClient/getFreeSeats'); ?>';
						
						// change the button caption
						$('#EmptySeats').val('Sending, Please wait...');

						// send Ajax request
						$.ajax({
							type: 'GET',
							url: urlAjax,
							data: getData,
							success: function(data) {
								alert('success.');
								
								// empty combobox
								$('#FlightClient_SeatId').empty();
								// change the text on the screen with id = FlightClient_SeatId
								$('#FlightClient_SeatId').append(data);

								// restore the button
								$('#EmptySeats').val('Get Empty Seats');

							},
							error: function(data) { // if error occured
								alert('Error occured. please try again.');

								// restore the button
								$('#EmptySeats').val('Get Empty Seats');
							},
							dataType: 'html', // this is the type of data we are receiving
							// from the controller not the data we
							// are sending to it
							timeout: 60000
						});
					}

				</script>
	
	
		b) in the controller (flightClientController.php) add these action and function
			
			
			public function actionGetFreeSeats()
			{
				$flightId = (int) $_GET['params'];
				
				$emptySeats = $this->findEmptySeatsOfFlight($flightId);
				
				// add one blank line
				echo CHtml::tag('option', array('value' => 0), CHtml::encode('Please select...'), true);
				foreach ($emptySeats as $key => $value)
				{
					echo CHtml::tag('option', array('value' => $emptySeats[$key]->SeatId), CHtml::encode($emptySeats[$key]->SeatNumber), true);
				}
				 
				 return true;
			   
			}
			
			public function findEmptySeatsOfFlight($flightId)
			{
				$criteria= new CDbCriteria;
				$criteria->condition = "(FlightId = $flightId) AND ".
						"SeatId NOT IN (select SeatId from flight_clients where FlightId = $flightId)";

				$emptySeats = AllSeatsOfFlightView::model()->findAll($criteria);
				
				return $emptySeats;
			}


		c) obviously the model class should have some functions too.
		
		for more details see FlightController and FlightClientController in TravelAgency project


181- SEO in Yii

	http://www.yiiframework.com/extension/yii-seo/
	
	
182- one example of using log() function in Yii: 

		Yii::log('There are errors in the signup process...', 'error', 'application.controllers.FrontController');
		
	or
		
		$message = 'TA LOG: Airline '.$id.' deleted by user = '. Yii::app()->user->id;
        Yii::log($message, 'info', 'application.controllers.AirLineController');
                

183- for logging, the protected/config/main.php should have

		'log' => array(
            'class' => 'CLogRouter',
            'routes' => array(
                // send "error" type messages to /protected/runtime/application.log file.
                array(
                    'class' => 'CFileLogRoute',
                    'levels' => 'error, warning',
                ),
                
                // send "info, trace" messages to /protected/runtime/infoMessages.log file.
                array(
                    'class' => 'CFileLogRoute',
                    'levels' => 'info, trace',
                    'logFile' => 'infoMessages.log',
                ),
                
                // send "warning" messages to webpage(on screen message)
                array(
                        'class' => 'CWebLogRoute',
                        'levels' => 'warning',
                ),
            ),
        ),
		

184- seo tools
		There are a lot of repetitive tasks to be done when optimizing your site for the search engines. To make your life easier, we've compiled a list of the most popular SEO Tools (nearly all 100% free) and categorized them into the following:

		keyword discovery

		Before you can begin to optimize your site for search engines, you must first know which keywords you are going after. Use these tools to find which things people are searching for in your industry!

		Google Adwords - Google's tool is probably the easiest to use and maybe the best if you think about the fact that Google is the most used search engine in the world (meaning they have access to the most data).
		AdCenter Keyword Group Detection - Microsoft's unique tool that will analyze a word or phrase that you give it and determine related phrases.
		Term Extractor - This tool will take a URL that you give it and return the relevant keywords from that page. It might be smart to insert an article about your industry and see what keywords they're using.
		KeyCompete - This program finds out what terms a site is advertising on with their Pay Per Click campaigns. Let them continue to pay for those keywords while you work on ranking #1 in the search engines and getting all your traffic for free!
		Popular Searches - If you have no idea what you want to have your site be about, consider using this tool which keeps track of the most popular search terms overall.

		keyword volume

		Almost as important as knowing what people are searching for is determining how many people are searching for it. Use these tools to get a rough estimate of the number of people searching for a keyword or phrase.

		Google Adwords External Tool - This has become a lot more helpful, as it now displays the actual volume of searches in a month.
		SEO Book Keyword Suggestion Tool - This tool uses wordtracker's API to get the estimated number of searches a keyword receives on each search engine (Google, Microsft, Yahoo).

		keyword density

		Term Target - This tool takes a URL and the keyword you're attempting to target and returns a letter score (A-F) on how well you have done. Fun, but it's hard to determine exactly how accurate it is as the search engines have not released their formulas for dterming how relevant pages are for a given keyword.

		backlink tracker

		Site Explorer - Yahoo's extensive backlink tracker tool. It has become the first choice of many who like to keep an eye on who's linking to them and how many links they have.
		Keyword Ranking - Digitalpoint's keyword tracking tool also has an option for you to look at how many backlinks your site has. It's a little hard to find, but it's there.
		Google "link:" query prepend - By typing "link:" followed by a domain name like espn.com, you can see a sample of backlinks that Google knows link to that site. It should be noted that this is only a sample, not a complete list.
		Domain Stats - Looks at the top three search engines to see how many backlinks to your site are showing up in for each.
		Backlink Analyzer - Currently in beta, this is something that you have to install on your computer. It is a computer application that does not run through a website and you can feel safer that no one is spying on your data.

		site popularity

		Alexa - Using toolbars installed on people's browsers, Alexa measures how popular your site is compared to every other site on the web. It tends to be accurate only for sites in the top 100,000.
		Trifecta - Determines how strong your page is based on several factors, such as: age of domain, page rank, backlinks and a few more metrics.
		keyword rankings
		Rank Checker - Keeps track of your ranks in the search engines without sharing it with anyone but yourself. However, you do have to download it and install it to your computer.
		Keyword Rankings - One of the first popular keyword trackers out there. It will tell you your daily, weekly, and monthly changes for each term that you enter. It also has a nice graph feature so you can see your progress graphically!
		Rank Checker - A very unique name, and it does what it says.

		firefox addons

		SEO for FireFox - An extension for your browser that changes your Google search results into MIT dissertation. Well maybe not that awesome, but it really does give you a lot of information relevant to why certain sites are showing up in the top 10 results of Google and what kind of competition you'd experience trying to get into those ranks. Also a nice way to find sites that are using the nofollow attribute.
		Greasemonkey - Used by more advanced users who would like to create their own scripts or use other Greasemonkey scripts for SEO purposes.

		other

		Google Analytics - Although this isn't really related to SEO, Google Analytics has a section that displays all the search terms that your visitors used to get to your site.
		Advanced Google Searches - A bunch of advanced Google searches that are done automatically with this nifty little tool.
		Crawl Test - Looks at a given URL to check for any common problems that might prevent your site being crawled properly by a search engine.
		Google Webmaster Tools - A decent collection of tools from Google that also will notify you if your website is being penalized (if you verify yourself as the site owner).
		SEOToolbox - A bunch of random tools from Seomoz. 


185-



Kamran
